
LCDCLOCK.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000033a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  0000033a  000003ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000007b  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000452  00000000  00000000  0000044f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000149  00000000  00000000  000008a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004e2  00000000  00000000  000009ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000b0  00000000  00000000  00000ecc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000108  00000000  00000000  00000f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000148  00000000  00000000  00001084  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000090  00000000  00000000  000011cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e3       	ldi	r30, 0x3A	; 58
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 23 01 	call	0x246	; 0x246 <main>
  7a:	0c 94 9b 01 	jmp	0x336	; 0x336 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_cmd>:
#define rw 1
#define e 2

void lcd_cmd(unsigned char ch)
{
 unsigned char a = (ch & 0xf0);
  82:	28 2f       	mov	r18, r24
  84:	20 7f       	andi	r18, 0xF0	; 240
 lcd = a;
  86:	25 bb       	out	0x15, r18	; 21
 lcd&=~(1<<rs);
  88:	a8 98       	cbi	0x15, 0	; 21
 lcd&=~(1<<rw);
  8a:	a9 98       	cbi	0x15, 1	; 21
 lcd|=(1<<e);
  8c:	aa 9a       	sbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  8e:	2a ef       	ldi	r18, 0xFA	; 250
  90:	30 e0       	ldi	r19, 0x00	; 0
  92:	f9 01       	movw	r30, r18
  94:	31 97       	sbiw	r30, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <lcd_cmd+0x12>
 _delay_ms(1);
 lcd&=~(1<<e);
  98:	aa 98       	cbi	0x15, 2	; 21
a = (ch<<4)&(0xf0);
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	44 e0       	ldi	r20, 0x04	; 4
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	4a 95       	dec	r20
  a4:	e1 f7       	brne	.-8      	; 0x9e <lcd_cmd+0x1c>
 lcd = a;
  a6:	85 bb       	out	0x15, r24	; 21
 lcd&=~(1<<rs);
  a8:	a8 98       	cbi	0x15, 0	; 21
 lcd&=~(1<<rw);
  aa:	a9 98       	cbi	0x15, 1	; 21
 lcd|=(1<<e);
  ac:	aa 9a       	sbi	0x15, 2	; 21
  ae:	c9 01       	movw	r24, r18
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <lcd_cmd+0x2e>
 _delay_ms(1);
 lcd&=~(1<<e);
  b4:	aa 98       	cbi	0x15, 2	; 21

}
  b6:	08 95       	ret

000000b8 <lcd_data>:

void lcd_data(unsigned char ch)
{
unsigned char a = (ch & 0xf0);
  b8:	28 2f       	mov	r18, r24
  ba:	20 7f       	andi	r18, 0xF0	; 240
 lcd=a;
  bc:	25 bb       	out	0x15, r18	; 21
 lcd|=(1<<rs);
  be:	a8 9a       	sbi	0x15, 0	; 21
 lcd&=~(1<<rw);
  c0:	a9 98       	cbi	0x15, 1	; 21
 lcd|=(1<<e);
  c2:	aa 9a       	sbi	0x15, 2	; 21
  c4:	2a ef       	ldi	r18, 0xFA	; 250
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	f9 01       	movw	r30, r18
  ca:	31 97       	sbiw	r30, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <lcd_data+0x12>
 _delay_ms(1);
 lcd&=~(1<<e);
  ce:	aa 98       	cbi	0x15, 2	; 21
a = (ch<<4)&(0xf0);
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	54 e0       	ldi	r21, 0x04	; 4
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	5a 95       	dec	r21
  da:	e1 f7       	brne	.-8      	; 0xd4 <lcd_data+0x1c>
 lcd = a;
  dc:	85 bb       	out	0x15, r24	; 21
 lcd|=(1<<rs);
  de:	a8 9a       	sbi	0x15, 0	; 21
 lcd&=~(1<<rw);
  e0:	a9 98       	cbi	0x15, 1	; 21
 lcd|=(1<<e);
  e2:	aa 9a       	sbi	0x15, 2	; 21
  e4:	c9 01       	movw	r24, r18
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <lcd_data+0x2e>
 _delay_ms(1);
 lcd&=~(1<<e);
  ea:	aa 98       	cbi	0x15, 2	; 21

}
  ec:	08 95       	ret

000000ee <lcd_init>:

void lcd_init()
{
 lcd_cmd(0x02); //reset
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 lcd_cmd(0x28); //4bit mode 
  f4:	88 e2       	ldi	r24, 0x28	; 40
  f6:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 lcd_cmd(0x0c); //cursor on
  fa:	8c e0       	ldi	r24, 0x0C	; 12
  fc:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 lcd_cmd(0x06); //auto increment
 100:	86 e0       	ldi	r24, 0x06	; 6
 102:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
}
 106:	08 95       	ret

00000108 <lcd_string>:

void lcd_string( unsigned char *str)
{
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	ec 01       	movw	r28, r24
 10e:	02 c0       	rjmp	.+4      	; 0x114 <lcd_string+0xc>
     int i =0;
     while(str[i]!='\0')
       {
              lcd_data(str[i]);
 110:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
}

void lcd_string( unsigned char *str)
{
     int i =0;
     while(str[i]!='\0')
 114:	89 91       	ld	r24, Y+
 116:	88 23       	and	r24, r24
 118:	d9 f7       	brne	.-10     	; 0x110 <lcd_string+0x8>
       {
              lcd_data(str[i]);
              i++;
             
       }
}
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <lcd_num>:

void lcd_num(unsigned long n)
{
 120:	ef 92       	push	r14
 122:	ff 92       	push	r15
 124:	0f 93       	push	r16
 126:	1f 93       	push	r17
 128:	7b 01       	movw	r14, r22
 12a:	8c 01       	movw	r16, r24
  lcd_cmd(0x04);
 12c:	84 e0       	ldi	r24, 0x04	; 4
 12e:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 132:	18 c0       	rjmp	.+48     	; 0x164 <lcd_num+0x44>
   while(n>0)
 {
        int a =n%10; 
        lcd_data(a+48);
 134:	c8 01       	movw	r24, r16
 136:	b7 01       	movw	r22, r14
 138:	2a e0       	ldi	r18, 0x0A	; 10
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	40 e0       	ldi	r20, 0x00	; 0
 13e:	50 e0       	ldi	r21, 0x00	; 0
 140:	0e 94 79 01 	call	0x2f2	; 0x2f2 <__udivmodsi4>
 144:	86 2f       	mov	r24, r22
 146:	80 5d       	subi	r24, 0xD0	; 208
 148:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
        n=n/10;
 14c:	c8 01       	movw	r24, r16
 14e:	b7 01       	movw	r22, r14
 150:	2a e0       	ldi	r18, 0x0A	; 10
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	40 e0       	ldi	r20, 0x00	; 0
 156:	50 e0       	ldi	r21, 0x00	; 0
 158:	0e 94 79 01 	call	0x2f2	; 0x2f2 <__udivmodsi4>
 15c:	c9 01       	movw	r24, r18
 15e:	da 01       	movw	r26, r20
 160:	7c 01       	movw	r14, r24
 162:	8d 01       	movw	r16, r26
}

void lcd_num(unsigned long n)
{
  lcd_cmd(0x04);
   while(n>0)
 164:	e1 14       	cp	r14, r1
 166:	f1 04       	cpc	r15, r1
 168:	01 05       	cpc	r16, r1
 16a:	11 05       	cpc	r17, r1
 16c:	19 f7       	brne	.-58     	; 0x134 <lcd_num+0x14>
 {
        int a =n%10; 
        lcd_data(a+48);
        n=n/10;
 }
lcd_cmd(0x06);
 16e:	86 e0       	ldi	r24, 0x06	; 6
 170:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
}
 174:	1f 91       	pop	r17
 176:	0f 91       	pop	r16
 178:	ff 90       	pop	r15
 17a:	ef 90       	pop	r14
 17c:	08 95       	ret

0000017e <colon>:
  
}

void colon ()
{
 lcd_cmd(0x40);
 17e:	80 e4       	ldi	r24, 0x40	; 64
 180:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 lcd_data(0b00000000);
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
 lcd_data(0b00000100);
 18a:	84 e0       	ldi	r24, 0x04	; 4
 18c:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
 lcd_data(0b00000100);
 190:	84 e0       	ldi	r24, 0x04	; 4
 192:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
 lcd_data(0b00000000);
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
 lcd_data(0b00000100);
 19c:	84 e0       	ldi	r24, 0x04	; 4
 19e:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
 lcd_data(0b00000100);
 1a2:	84 e0       	ldi	r24, 0x04	; 4
 1a4:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
 lcd_data(0b00000000);
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
}
 1ae:	08 95       	ret

000001b0 <zero>:

void zero()
{
 lcd_cmd(0x48);
 1b0:	88 e4       	ldi	r24, 0x48	; 72
 1b2:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 lcd_data(0b00011111);
 1b6:	8f e1       	ldi	r24, 0x1F	; 31
 1b8:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
 lcd_data(0b00010001);
 1bc:	81 e1       	ldi	r24, 0x11	; 17
 1be:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
 lcd_data(0b00010001);
 1c2:	81 e1       	ldi	r24, 0x11	; 17
 1c4:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
 lcd_data(0b00010001);
 1c8:	81 e1       	ldi	r24, 0x11	; 17
 1ca:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
 lcd_data(0b00010001);
 1ce:	81 e1       	ldi	r24, 0x11	; 17
 1d0:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
 lcd_data(0b00010001);
 1d4:	81 e1       	ldi	r24, 0x11	; 17
 1d6:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
 lcd_data(0b00011111);
 1da:	8f e1       	ldi	r24, 0x1F	; 31
 1dc:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
}
 1e0:	08 95       	ret

000001e2 <A>:


void A()
{
 lcd_cmd(0x50);
 1e2:	80 e5       	ldi	r24, 0x50	; 80
 1e4:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 lcd_data(0b00000000);
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
 lcd_data(0b00000000);
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
 lcd_data(0b00000000);
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
 lcd_data(0b00001110);
 1fa:	8e e0       	ldi	r24, 0x0E	; 14
 1fc:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
 lcd_data(0b00010001);
 200:	81 e1       	ldi	r24, 0x11	; 17
 202:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
 lcd_data(0b00011111);
 206:	8f e1       	ldi	r24, 0x1F	; 31
 208:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
 lcd_data(0b00010001);
 20c:	81 e1       	ldi	r24, 0x11	; 17
 20e:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
}
 212:	08 95       	ret

00000214 <m>:

void m()
{
 lcd_cmd(0x58);
 214:	88 e5       	ldi	r24, 0x58	; 88
 216:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 lcd_data(0b00000000);
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
 lcd_data(0b00000000);
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
 lcd_data(0b00000000);
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
 lcd_data(0b00010001);
 22c:	81 e1       	ldi	r24, 0x11	; 17
 22e:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
 lcd_data(0b00011011);
 232:	8b e1       	ldi	r24, 0x1B	; 27
 234:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
 lcd_data(0b00010101);
 238:	85 e1       	ldi	r24, 0x15	; 21
 23a:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
 lcd_data(0b00010001);
 23e:	81 e1       	ldi	r24, 0x11	; 17
 240:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
}
 244:	08 95       	ret

00000246 <main>:
#include<avr/io.h>
#include<util/delay.h>
#include "lcd.h"

void main () 
{int a=0;
 246:	0f 93       	push	r16
 248:	1f 93       	push	r17
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
 DDRC=0xff;
 24e:	8f ef       	ldi	r24, 0xFF	; 255
 250:	84 bb       	out	0x14, r24	; 20
 lcd_init();
 252:	0e 94 77 00 	call	0xee	; 0xee <lcd_init>
 m();
 256:	0e 94 0a 01 	call	0x214	; 0x214 <m>
 A();
 25a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <A>
 colon();
 25e:	0e 94 bf 00 	call	0x17e	; 0x17e <colon>
 zero();
 262:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <zero>
 lcd_cmd(0x01);
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 26c:	84 ec       	ldi	r24, 0xC4	; 196
 26e:	99 e0       	ldi	r25, 0x09	; 9
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <main+0x2a>
 _delay_ms(10);
 
 while (1)
 {
      lcd_cmd(0x85);
 274:	0a ef       	ldi	r16, 0xFA	; 250
 276:	10 e0       	ldi	r17, 0x00	; 0
 278:	c4 ec       	ldi	r28, 0xC4	; 196
 27a:	d9 e0       	ldi	r29, 0x09	; 9
 27c:	85 e8       	ldi	r24, 0x85	; 133
 27e:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
      lcd_string("CLOCK");
 282:	80 e6       	ldi	r24, 0x60	; 96
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 84 00 	call	0x108	; 0x108 <lcd_string>
 28a:	c8 01       	movw	r24, r16
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <main+0x46>
      _delay_ms(1);
   
      lcd_cmd(0xc5);
 290:	85 ec       	ldi	r24, 0xC5	; 197
 292:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
      lcd_data(1);
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
 29c:	ce 01       	movw	r24, r28
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <main+0x58>
      _delay_ms(10);
  
      lcd_cmd(0xc7);
 2a2:	87 ec       	ldi	r24, 0xC7	; 199
 2a4:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
      lcd_data(1);
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
 2ae:	ce 01       	movw	r24, r28
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <main+0x6a>
      _delay_ms(10);
  
      lcd_cmd(0xc8);
 2b4:	88 ec       	ldi	r24, 0xC8	; 200
 2b6:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
      lcd_data(1);
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
 2c0:	ce 01       	movw	r24, r28
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <main+0x7c>
      _delay_ms(10);
  
      lcd_cmd(0xc6);
 2c6:	86 ec       	ldi	r24, 0xC6	; 198
 2c8:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
      lcd_data(0);
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
 2d2:	ce 01       	movw	r24, r28
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <main+0x8e>
      _delay_ms(10); 
   
      lcd_cmd(0xc9);
 2d8:	89 ec       	ldi	r24, 0xC9	; 201
 2da:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
      lcd_data(2);   
 2de:	82 e0       	ldi	r24, 0x02	; 2
 2e0:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
      lcd_data(3);
 2e4:	83 e0       	ldi	r24, 0x03	; 3
 2e6:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
 2ea:	ce 01       	movw	r24, r28
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <main+0xa6>
 2f0:	c5 cf       	rjmp	.-118    	; 0x27c <main+0x36>

000002f2 <__udivmodsi4>:
 2f2:	a1 e2       	ldi	r26, 0x21	; 33
 2f4:	1a 2e       	mov	r1, r26
 2f6:	aa 1b       	sub	r26, r26
 2f8:	bb 1b       	sub	r27, r27
 2fa:	fd 01       	movw	r30, r26
 2fc:	0d c0       	rjmp	.+26     	; 0x318 <__udivmodsi4_ep>

000002fe <__udivmodsi4_loop>:
 2fe:	aa 1f       	adc	r26, r26
 300:	bb 1f       	adc	r27, r27
 302:	ee 1f       	adc	r30, r30
 304:	ff 1f       	adc	r31, r31
 306:	a2 17       	cp	r26, r18
 308:	b3 07       	cpc	r27, r19
 30a:	e4 07       	cpc	r30, r20
 30c:	f5 07       	cpc	r31, r21
 30e:	20 f0       	brcs	.+8      	; 0x318 <__udivmodsi4_ep>
 310:	a2 1b       	sub	r26, r18
 312:	b3 0b       	sbc	r27, r19
 314:	e4 0b       	sbc	r30, r20
 316:	f5 0b       	sbc	r31, r21

00000318 <__udivmodsi4_ep>:
 318:	66 1f       	adc	r22, r22
 31a:	77 1f       	adc	r23, r23
 31c:	88 1f       	adc	r24, r24
 31e:	99 1f       	adc	r25, r25
 320:	1a 94       	dec	r1
 322:	69 f7       	brne	.-38     	; 0x2fe <__udivmodsi4_loop>
 324:	60 95       	com	r22
 326:	70 95       	com	r23
 328:	80 95       	com	r24
 32a:	90 95       	com	r25
 32c:	9b 01       	movw	r18, r22
 32e:	ac 01       	movw	r20, r24
 330:	bd 01       	movw	r22, r26
 332:	cf 01       	movw	r24, r30
 334:	08 95       	ret

00000336 <_exit>:
 336:	f8 94       	cli

00000338 <__stop_program>:
 338:	ff cf       	rjmp	.-2      	; 0x338 <__stop_program>
