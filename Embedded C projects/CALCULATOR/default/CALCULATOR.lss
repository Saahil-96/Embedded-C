
CALCULATOR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ab6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000b0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000094  00000000  00000000  00000b2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000b39  00000000  00000000  00000bbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001d5  00000000  00000000  000016f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000b56  00000000  00000000  000018cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000c0  00000000  00000000  00002424  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000121  00000000  00000000  000024e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000df8  00000000  00000000  00002605  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  000033fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 40 01 	call	0x280	; 0x280 <main>
  64:	0c 94 59 05 	jmp	0xab2	; 0xab2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <lcd_cmd>:
#define rw 1
#define e 2

void lcd_cmd(unsigned char ch)
{
 unsigned char a = (ch & 0xf0);
  6c:	28 2f       	mov	r18, r24
  6e:	20 7f       	andi	r18, 0xF0	; 240
 lcd = a;
  70:	25 bb       	out	0x15, r18	; 21
 lcd&=~(1<<rs);
  72:	a8 98       	cbi	0x15, 0	; 21
 lcd&=~(1<<rw);
  74:	a9 98       	cbi	0x15, 1	; 21
 lcd|=(1<<e);
  76:	aa 9a       	sbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  78:	2a ef       	ldi	r18, 0xFA	; 250
  7a:	30 e0       	ldi	r19, 0x00	; 0
  7c:	f9 01       	movw	r30, r18
  7e:	31 97       	sbiw	r30, 0x01	; 1
  80:	f1 f7       	brne	.-4      	; 0x7e <lcd_cmd+0x12>
 _delay_ms(1);
 lcd&=~(1<<e);
  82:	aa 98       	cbi	0x15, 2	; 21
a = (ch<<4)&(0xf0);
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	44 e0       	ldi	r20, 0x04	; 4
  88:	88 0f       	add	r24, r24
  8a:	99 1f       	adc	r25, r25
  8c:	4a 95       	dec	r20
  8e:	e1 f7       	brne	.-8      	; 0x88 <lcd_cmd+0x1c>
 lcd = a;
  90:	85 bb       	out	0x15, r24	; 21
 lcd&=~(1<<rs);
  92:	a8 98       	cbi	0x15, 0	; 21
 lcd&=~(1<<rw);
  94:	a9 98       	cbi	0x15, 1	; 21
 lcd|=(1<<e);
  96:	aa 9a       	sbi	0x15, 2	; 21
  98:	c9 01       	movw	r24, r18
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <lcd_cmd+0x2e>
 _delay_ms(1);
 lcd&=~(1<<e);
  9e:	aa 98       	cbi	0x15, 2	; 21

}
  a0:	08 95       	ret

000000a2 <lcd_data>:

void lcd_data(unsigned char ch)
{
unsigned char a = (ch & 0xf0);
  a2:	28 2f       	mov	r18, r24
  a4:	20 7f       	andi	r18, 0xF0	; 240
 lcd=a;
  a6:	25 bb       	out	0x15, r18	; 21
 lcd|=(1<<rs);
  a8:	a8 9a       	sbi	0x15, 0	; 21
 lcd&=~(1<<rw);
  aa:	a9 98       	cbi	0x15, 1	; 21
 lcd|=(1<<e);
  ac:	aa 9a       	sbi	0x15, 2	; 21
  ae:	2a ef       	ldi	r18, 0xFA	; 250
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	f9 01       	movw	r30, r18
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <lcd_data+0x12>
 _delay_ms(1);
 lcd&=~(1<<e);
  b8:	aa 98       	cbi	0x15, 2	; 21
a = (ch<<4)&(0xf0);
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	54 e0       	ldi	r21, 0x04	; 4
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	5a 95       	dec	r21
  c4:	e1 f7       	brne	.-8      	; 0xbe <lcd_data+0x1c>
 lcd = a;
  c6:	85 bb       	out	0x15, r24	; 21
 lcd|=(1<<rs);
  c8:	a8 9a       	sbi	0x15, 0	; 21
 lcd&=~(1<<rw);
  ca:	a9 98       	cbi	0x15, 1	; 21
 lcd|=(1<<e);
  cc:	aa 9a       	sbi	0x15, 2	; 21
  ce:	c9 01       	movw	r24, r18
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <lcd_data+0x2e>
 _delay_ms(1);
 lcd&=~(1<<e);
  d4:	aa 98       	cbi	0x15, 2	; 21

}
  d6:	08 95       	ret

000000d8 <lcd_init>:

void lcd_init()
{
 lcd_cmd(0x02); //reset
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
 lcd_cmd(0x28); //4bit mode 
  de:	88 e2       	ldi	r24, 0x28	; 40
  e0:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
 lcd_cmd(0x0c); //cursor on
  e4:	8c e0       	ldi	r24, 0x0C	; 12
  e6:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
 lcd_cmd(0x06); //auto increment
  ea:	86 e0       	ldi	r24, 0x06	; 6
  ec:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
}
  f0:	08 95       	ret

000000f2 <lcd_string>:

void lcd_string( unsigned char *str)
{
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
  f6:	ec 01       	movw	r28, r24
  f8:	02 c0       	rjmp	.+4      	; 0xfe <lcd_string+0xc>
     int i =0;
     while(str[i]!='\0')
       {
              lcd_data(str[i]);
  fa:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_data>
}

void lcd_string( unsigned char *str)
{
     int i =0;
     while(str[i]!='\0')
  fe:	89 91       	ld	r24, Y+
 100:	88 23       	and	r24, r24
 102:	d9 f7       	brne	.-10     	; 0xfa <lcd_string+0x8>
       {
              lcd_data(str[i]);
              i++;
             
       }
}
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <lcd_num>:

void lcd_num(unsigned long n)
{
 10a:	ef 92       	push	r14
 10c:	ff 92       	push	r15
 10e:	0f 93       	push	r16
 110:	1f 93       	push	r17
 112:	7b 01       	movw	r14, r22
 114:	8c 01       	movw	r16, r24
  lcd_cmd(0x04);
 116:	84 e0       	ldi	r24, 0x04	; 4
 118:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
 11c:	18 c0       	rjmp	.+48     	; 0x14e <lcd_num+0x44>
   while(n>0)
 {
        int a =n%10; 
        lcd_data(a+48);
 11e:	c8 01       	movw	r24, r16
 120:	b7 01       	movw	r22, r14
 122:	2a e0       	ldi	r18, 0x0A	; 10
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	40 e0       	ldi	r20, 0x00	; 0
 128:	50 e0       	ldi	r21, 0x00	; 0
 12a:	0e 94 08 05 	call	0xa10	; 0xa10 <__udivmodsi4>
 12e:	86 2f       	mov	r24, r22
 130:	80 5d       	subi	r24, 0xD0	; 208
 132:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_data>
        n=n/10;
 136:	c8 01       	movw	r24, r16
 138:	b7 01       	movw	r22, r14
 13a:	2a e0       	ldi	r18, 0x0A	; 10
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	40 e0       	ldi	r20, 0x00	; 0
 140:	50 e0       	ldi	r21, 0x00	; 0
 142:	0e 94 08 05 	call	0xa10	; 0xa10 <__udivmodsi4>
 146:	c9 01       	movw	r24, r18
 148:	da 01       	movw	r26, r20
 14a:	7c 01       	movw	r14, r24
 14c:	8d 01       	movw	r16, r26
}

void lcd_num(unsigned long n)
{
  lcd_cmd(0x04);
   while(n>0)
 14e:	e1 14       	cp	r14, r1
 150:	f1 04       	cpc	r15, r1
 152:	01 05       	cpc	r16, r1
 154:	11 05       	cpc	r17, r1
 156:	19 f7       	brne	.-58     	; 0x11e <lcd_num+0x14>
 {
        int a =n%10; 
        lcd_data(a+48);
        n=n/10;
 }
lcd_cmd(0x06);
 158:	86 e0       	ldi	r24, 0x06	; 6
 15a:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
}
 15e:	1f 91       	pop	r17
 160:	0f 91       	pop	r16
 162:	ff 90       	pop	r15
 164:	ef 90       	pop	r14
 166:	08 95       	ret

00000168 <Keypad>:
int Keypad ()
{
unsigned char a,b,c,d;
 PORTA=0b11101111;
 168:	8f ee       	ldi	r24, 0xEF	; 239
 16a:	8b bb       	out	0x1b, r24	; 27
 a=PINA&(1<<0);
 16c:	39 b3       	in	r19, 0x19	; 25
 b=PINA&(1<<1);
 16e:	29 b3       	in	r18, 0x19	; 25
 c=PINA&(1<<2);
 170:	89 b3       	in	r24, 0x19	; 25
 d=PINA&(1<<3);
 172:	99 b3       	in	r25, 0x19	; 25

 if ((c==0))
 174:	82 ff       	sbrs	r24, 2
 176:	5b c0       	rjmp	.+182    	; 0x22e <Keypad+0xc6>
 { 
  return(0);
  }
 if ((a==0))
 178:	30 fd       	sbrc	r19, 0
 17a:	03 c0       	rjmp	.+6      	; 0x182 <Keypad+0x1a>
 17c:	2a e0       	ldi	r18, 0x0A	; 10
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	58 c0       	rjmp	.+176    	; 0x232 <Keypad+0xca>
 { 
  return(10);
  }
 if ((b==0))
 182:	21 fd       	sbrc	r18, 1
 184:	03 c0       	rjmp	.+6      	; 0x18c <Keypad+0x24>
 186:	2f e0       	ldi	r18, 0x0F	; 15
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	53 c0       	rjmp	.+166    	; 0x232 <Keypad+0xca>
 { 
  return(15);
  }
 if ((d==0))
 18c:	93 fd       	sbrc	r25, 3
 18e:	03 c0       	rjmp	.+6      	; 0x196 <Keypad+0x2e>
 190:	20 e1       	ldi	r18, 0x10	; 16
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	4e c0       	rjmp	.+156    	; 0x232 <Keypad+0xca>
 { 
  return(16);
  }


 PORTA=0b11011111;
 196:	8f ed       	ldi	r24, 0xDF	; 223
 198:	8b bb       	out	0x1b, r24	; 27
 a=PINA&(1<<0);
 19a:	29 b3       	in	r18, 0x19	; 25
 b=PINA&(1<<1);
 19c:	99 b3       	in	r25, 0x19	; 25
 c=PINA&(1<<2);
 19e:	89 b3       	in	r24, 0x19	; 25
 d=PINA&(1<<3);

 if ((d==0))
 1a0:	cb 99       	sbic	0x19, 3	; 25
 1a2:	03 c0       	rjmp	.+6      	; 0x1aa <Keypad+0x42>
 1a4:	21 e0       	ldi	r18, 0x01	; 1
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	44 c0       	rjmp	.+136    	; 0x232 <Keypad+0xca>
 { 
 return(1);
  }
 if ((c==0))
 1aa:	82 fd       	sbrc	r24, 2
 1ac:	03 c0       	rjmp	.+6      	; 0x1b4 <Keypad+0x4c>
 1ae:	22 e0       	ldi	r18, 0x02	; 2
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	3f c0       	rjmp	.+126    	; 0x232 <Keypad+0xca>
 { 
 return(2);
  }
 if ((b==0))
 1b4:	91 fd       	sbrc	r25, 1
 1b6:	03 c0       	rjmp	.+6      	; 0x1be <Keypad+0x56>
 1b8:	23 e0       	ldi	r18, 0x03	; 3
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	3a c0       	rjmp	.+116    	; 0x232 <Keypad+0xca>
 { 
 return(3);
  }
 if ((a==0))
 1be:	20 fd       	sbrc	r18, 0
 1c0:	03 c0       	rjmp	.+6      	; 0x1c8 <Keypad+0x60>
 1c2:	2b e0       	ldi	r18, 0x0B	; 11
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	35 c0       	rjmp	.+106    	; 0x232 <Keypad+0xca>
 { 
  return(11);
  }
 	
 PORTA=0b10111111;
 1c8:	8f eb       	ldi	r24, 0xBF	; 191
 1ca:	8b bb       	out	0x1b, r24	; 27
 a=PINA&(1<<0);
 1cc:	29 b3       	in	r18, 0x19	; 25
 b=PINA&(1<<1);
 1ce:	99 b3       	in	r25, 0x19	; 25
 c=PINA&(1<<2);
 1d0:	89 b3       	in	r24, 0x19	; 25
 d=PINA&(1<<3);

 if ((d==0))
 1d2:	cb 99       	sbic	0x19, 3	; 25
 1d4:	03 c0       	rjmp	.+6      	; 0x1dc <Keypad+0x74>
 1d6:	24 e0       	ldi	r18, 0x04	; 4
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	2b c0       	rjmp	.+86     	; 0x232 <Keypad+0xca>
 { 
 return(4);
  }
 if ((c==0))
 1dc:	82 fd       	sbrc	r24, 2
 1de:	03 c0       	rjmp	.+6      	; 0x1e6 <Keypad+0x7e>
 1e0:	25 e0       	ldi	r18, 0x05	; 5
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	26 c0       	rjmp	.+76     	; 0x232 <Keypad+0xca>
 { 
 return(5);
  }
 if ((b==0))
 1e6:	91 fd       	sbrc	r25, 1
 1e8:	03 c0       	rjmp	.+6      	; 0x1f0 <Keypad+0x88>
 1ea:	26 e0       	ldi	r18, 0x06	; 6
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	21 c0       	rjmp	.+66     	; 0x232 <Keypad+0xca>
 { 
 return(6);
  }
 if ((a==0))
 1f0:	20 fd       	sbrc	r18, 0
 1f2:	03 c0       	rjmp	.+6      	; 0x1fa <Keypad+0x92>
 1f4:	2c e0       	ldi	r18, 0x0C	; 12
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	1c c0       	rjmp	.+56     	; 0x232 <Keypad+0xca>
 { 
  return(12);
  }

 PORTA=0b01111111;
 1fa:	8f e7       	ldi	r24, 0x7F	; 127
 1fc:	8b bb       	out	0x1b, r24	; 27
 a=PINA&(1<<0);
 1fe:	29 b3       	in	r18, 0x19	; 25
 b=PINA&(1<<1);
 200:	99 b3       	in	r25, 0x19	; 25
 c=PINA&(1<<2);
 202:	89 b3       	in	r24, 0x19	; 25
 d=PINA&(1<<3);

 if ((d==0))
 204:	cb 99       	sbic	0x19, 3	; 25
 206:	03 c0       	rjmp	.+6      	; 0x20e <Keypad+0xa6>
 208:	27 e0       	ldi	r18, 0x07	; 7
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	12 c0       	rjmp	.+36     	; 0x232 <Keypad+0xca>
 { 
 return(7);
  }
 if ((c==0))
 20e:	82 fd       	sbrc	r24, 2
 210:	03 c0       	rjmp	.+6      	; 0x218 <Keypad+0xb0>
 212:	28 e0       	ldi	r18, 0x08	; 8
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	0d c0       	rjmp	.+26     	; 0x232 <Keypad+0xca>
 { 
 return(8);
  }
 if ((b==0))
 218:	91 fd       	sbrc	r25, 1
 21a:	03 c0       	rjmp	.+6      	; 0x222 <Keypad+0xba>
 21c:	29 e0       	ldi	r18, 0x09	; 9
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	08 c0       	rjmp	.+16     	; 0x232 <Keypad+0xca>
 { 
 return(9);
  }
 if ((a==0))
 222:	20 fd       	sbrc	r18, 0
 224:	03 c0       	rjmp	.+6      	; 0x22c <Keypad+0xc4>
 226:	2d e0       	ldi	r18, 0x0D	; 13
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	03 c0       	rjmp	.+6      	; 0x232 <Keypad+0xca>
 22c:	08 95       	ret
 { 
  return(13);
  }


}
 22e:	20 e0       	ldi	r18, 0x00	; 0
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	c9 01       	movw	r24, r18
 234:	08 95       	ret

00000236 <add>:
int add(W,D)
{
 236:	68 0f       	add	r22, r24
 238:	79 1f       	adc	r23, r25
 long E;
 E=W+D;
 return E ;
}
 23a:	cb 01       	movw	r24, r22
 23c:	08 95       	ret

0000023e <multiply>:
int multiply(W,D)
{
 23e:	68 9f       	mul	r22, r24
 240:	90 01       	movw	r18, r0
 242:	69 9f       	mul	r22, r25
 244:	30 0d       	add	r19, r0
 246:	78 9f       	mul	r23, r24
 248:	30 0d       	add	r19, r0
 24a:	11 24       	eor	r1, r1
 long E;
 E=W*D;
 return E ;
}
 24c:	c9 01       	movw	r24, r18
 24e:	08 95       	ret

00000250 <subtract>:

int subtract(W,D)
{
 long E;
 if(W>D)
 250:	68 17       	cp	r22, r24
 252:	79 07       	cpc	r23, r25
 254:	44 f4       	brge	.+16     	; 0x266 <subtract+0x16>
 {E=W-D;}
 256:	86 1b       	sub	r24, r22
 258:	97 0b       	sbc	r25, r23
 25a:	9c 01       	movw	r18, r24
 25c:	44 27       	eor	r20, r20
 25e:	37 fd       	sbrc	r19, 7
 260:	40 95       	com	r20
 262:	54 2f       	mov	r21, r20
 264:	07 c0       	rjmp	.+14     	; 0x274 <subtract+0x24>
 else
 {E=D-W;} 
 266:	68 1b       	sub	r22, r24
 268:	79 0b       	sbc	r23, r25
 26a:	9b 01       	movw	r18, r22
 26c:	44 27       	eor	r20, r20
 26e:	37 fd       	sbrc	r19, 7
 270:	40 95       	com	r20
 272:	54 2f       	mov	r21, r20
 return E ;
}
 274:	c9 01       	movw	r24, r18
 276:	08 95       	ret

00000278 <divide>:

int divide(W,D)
{
 278:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__divmodhi4>
 27c:	cb 01       	movw	r24, r22
 long E;
 E=W/D;
 return E ;
}
 27e:	08 95       	ret

00000280 <main>:
#include "lcd.h"
#include "keypad.h"
#include "operations.h"

void main ()
{
 280:	2f 92       	push	r2
 282:	3f 92       	push	r3
 284:	4f 92       	push	r4
 286:	5f 92       	push	r5
 288:	6f 92       	push	r6
 28a:	7f 92       	push	r7
 28c:	8f 92       	push	r8
 28e:	9f 92       	push	r9
 290:	af 92       	push	r10
 292:	bf 92       	push	r11
 294:	cf 92       	push	r12
 296:	df 92       	push	r13
 298:	ef 92       	push	r14
 29a:	ff 92       	push	r15
 29c:	0f 93       	push	r16
 29e:	1f 93       	push	r17
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
 int A,B,Q=0,q1=0,q2=0;
 int y=0x80,z=0xcf;
 DDRC=0xff;
 2a4:	8f ef       	ldi	r24, 0xFF	; 255
 2a6:	84 bb       	out	0x14, r24	; 20
 DDRA=0xf0;
 2a8:	80 ef       	ldi	r24, 0xF0	; 240
 2aa:	8a bb       	out	0x1a, r24	; 26
 lcd_init();
 2ac:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_init>
 lcd_cmd(0x01);
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
 2b6:	84 ec       	ldi	r24, 0xC4	; 196
 2b8:	99 e0       	ldi	r25, 0x09	; 9
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <main+0x3a>
 2be:	10 e8       	ldi	r17, 0x80	; 128
 2c0:	e1 2e       	mov	r14, r17
 2c2:	f1 2c       	mov	r15, r1
	    lcd_cmd(0x8D);
		lcd_string(".");	
       _delay_ms(500);
	    }
	_delay_ms(100);*/ 
	 lcd_cmd(0x01);
 2c4:	b4 ec       	ldi	r27, 0xC4	; 196
 2c6:	2b 2e       	mov	r2, r27
 2c8:	b9 e0       	ldi	r27, 0x09	; 9
 2ca:	3b 2e       	mov	r3, r27
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
 2d2:	c1 01       	movw	r24, r2
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <main+0x54>
    _delay_ms(10);
	lcd_cmd(0x80);
 2d8:	80 e8       	ldi	r24, 0x80	; 128
 2da:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
     lcd_data('0');
 2de:	80 e3       	ldi	r24, 0x30	; 48
 2e0:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_data>
 2e4:	00 e0       	ldi	r16, 0x00	; 0
 2e6:	10 e0       	ldi	r17, 0x00	; 0
 2e8:	c0 e0       	ldi	r28, 0x00	; 0
 2ea:	d0 e0       	ldi	r29, 0x00	; 0
 2ec:	74 c3       	rjmp	.+1768   	; 0x9d6 <__stack+0x577>
    	  while (PORTA!=0xff)
	    {
		  int A=Keypad ();
 2ee:	0e 94 b4 00 	call	0x168	; 0x168 <Keypad>
		    if(A==0)
 2f2:	00 97       	sbiw	r24, 0x00	; 0
 2f4:	09 f0       	breq	.+2      	; 0x2f8 <main+0x78>
 2f6:	3e c0       	rjmp	.+124    	; 0x374 <main+0xf4>
 2f8:	67 01       	movw	r12, r14
 2fa:	08 94       	sec
 2fc:	c1 1c       	adc	r12, r1
 2fe:	d1 1c       	adc	r13, r1
		       {    if(Q!=1)
 300:	21 e0       	ldi	r18, 0x01	; 1
 302:	a2 16       	cp	r10, r18
 304:	b1 04       	cpc	r11, r1
 306:	d1 f0       	breq	.+52     	; 0x33c <main+0xbc>
                  { lcd_cmd(0x01);
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
 30e:	c1 01       	movw	r24, r2
 310:	01 97       	sbiw	r24, 0x01	; 1
 312:	f1 f7       	brne	.-4      	; 0x310 <main+0x90>
                    _delay_ms(10);
					W=(10*W)+0;
 314:	c8 01       	movw	r24, r16
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	f3 e0       	ldi	r31, 0x03	; 3
 31c:	00 0f       	add	r16, r16
 31e:	11 1f       	adc	r17, r17
 320:	fa 95       	dec	r31
 322:	e1 f7       	brne	.-8      	; 0x31c <main+0x9c>
 324:	08 0f       	add	r16, r24
 326:	19 1f       	adc	r17, r25
					lcd_cmd(y);
 328:	8e 2d       	mov	r24, r14
 32a:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
					lcd_num(W);
 32e:	b8 01       	movw	r22, r16
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	0e 94 85 00 	call	0x10a	; 0x10a <lcd_num>
					 q1++;
					 y++;}
 338:	76 01       	movw	r14, r12
 33a:	13 c0       	rjmp	.+38     	; 0x362 <main+0xe2>
                    else if(Q==1)
                    {D=(10*D)+0;
 33c:	ce 01       	movw	r24, r28
 33e:	88 0f       	add	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	73 e0       	ldi	r23, 0x03	; 3
 344:	cc 0f       	add	r28, r28
 346:	dd 1f       	adc	r29, r29
 348:	7a 95       	dec	r23
 34a:	e1 f7       	brne	.-8      	; 0x344 <main+0xc4>
 34c:	c8 0f       	add	r28, r24
 34e:	d9 1f       	adc	r29, r25
					 y++;
 350:	76 01       	movw	r14, r12
					 lcd_cmd(y);
 352:	8c 2d       	mov	r24, r12
 354:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
					 lcd_num(D);
 358:	be 01       	movw	r22, r28
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e 94 85 00 	call	0x10a	; 0x10a <lcd_num>
 362:	88 e8       	ldi	r24, 0x88	; 136
 364:	93 e1       	ldi	r25, 0x13	; 19
 366:	e9 e1       	ldi	r30, 0x19	; 25
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	31 97       	sbiw	r30, 0x01	; 1
 36c:	f1 f7       	brne	.-4      	; 0x36a <main+0xea>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 36e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 370:	d1 f7       	brne	.-12     	; 0x366 <main+0xe6>
 372:	36 c3       	rjmp	.+1644   	; 0x9e0 <__stack+0x581>
					 q2++;}
					_delay_ms(500);     
         	    }
            else if(A==1)
 374:	81 30       	cpi	r24, 0x01	; 1
 376:	91 05       	cpc	r25, r1
 378:	09 f0       	breq	.+2      	; 0x37c <main+0xfc>
 37a:	41 c0       	rjmp	.+130    	; 0x3fe <main+0x17e>
 37c:	67 01       	movw	r12, r14
 37e:	08 94       	sec
 380:	c1 1c       	adc	r12, r1
 382:	d1 1c       	adc	r13, r1
		        {    if(Q!=1)
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	a8 16       	cp	r10, r24
 388:	b1 04       	cpc	r11, r1
 38a:	e1 f0       	breq	.+56     	; 0x3c4 <main+0x144>
                    {
					lcd_cmd(0x01);
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
 392:	c1 01       	movw	r24, r2
 394:	01 97       	sbiw	r24, 0x01	; 1
 396:	f1 f7       	brne	.-4      	; 0x394 <main+0x114>
                    _delay_ms(10);
					W=(10*W)+1;
 398:	c8 01       	movw	r24, r16
 39a:	63 e0       	ldi	r22, 0x03	; 3
 39c:	88 0f       	add	r24, r24
 39e:	99 1f       	adc	r25, r25
 3a0:	6a 95       	dec	r22
 3a2:	e1 f7       	brne	.-8      	; 0x39c <main+0x11c>
 3a4:	00 0f       	add	r16, r16
 3a6:	11 1f       	adc	r17, r17
 3a8:	08 0f       	add	r16, r24
 3aa:	19 1f       	adc	r17, r25
 3ac:	0f 5f       	subi	r16, 0xFF	; 255
 3ae:	1f 4f       	sbci	r17, 0xFF	; 255
					lcd_cmd(y);
 3b0:	8e 2d       	mov	r24, r14
 3b2:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
					lcd_num(W);
 3b6:	b8 01       	movw	r22, r16
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	0e 94 85 00 	call	0x10a	; 0x10a <lcd_num>
					 q1++;
					 y++;}
 3c0:	76 01       	movw	r14, r12
 3c2:	14 c0       	rjmp	.+40     	; 0x3ec <main+0x16c>
                    else if(Q==1)
                    {D=(10*D)+1;
 3c4:	ce 01       	movw	r24, r28
 3c6:	43 e0       	ldi	r20, 0x03	; 3
 3c8:	88 0f       	add	r24, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	4a 95       	dec	r20
 3ce:	e1 f7       	brne	.-8      	; 0x3c8 <main+0x148>
 3d0:	cc 0f       	add	r28, r28
 3d2:	dd 1f       	adc	r29, r29
 3d4:	c8 0f       	add	r28, r24
 3d6:	d9 1f       	adc	r29, r25
 3d8:	21 96       	adiw	r28, 0x01	; 1
					 y++;
 3da:	76 01       	movw	r14, r12
					 lcd_cmd(y);
 3dc:	8c 2d       	mov	r24, r12
 3de:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
					 lcd_num(D);
 3e2:	be 01       	movw	r22, r28
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	0e 94 85 00 	call	0x10a	; 0x10a <lcd_num>
 3ec:	88 e8       	ldi	r24, 0x88	; 136
 3ee:	93 e1       	ldi	r25, 0x13	; 19
 3f0:	e9 e1       	ldi	r30, 0x19	; 25
 3f2:	f0 e0       	ldi	r31, 0x00	; 0
 3f4:	31 97       	sbiw	r30, 0x01	; 1
 3f6:	f1 f7       	brne	.-4      	; 0x3f4 <main+0x174>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3f8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3fa:	d1 f7       	brne	.-12     	; 0x3f0 <main+0x170>
 3fc:	f1 c2       	rjmp	.+1506   	; 0x9e0 <__stack+0x581>
					 q2++;}
					_delay_ms(500);     
                  }
    	     else if(A==2)
 3fe:	82 30       	cpi	r24, 0x02	; 2
 400:	91 05       	cpc	r25, r1
 402:	09 f0       	breq	.+2      	; 0x406 <main+0x186>
 404:	3f c0       	rjmp	.+126    	; 0x484 <__stack+0x25>
 406:	67 01       	movw	r12, r14
 408:	08 94       	sec
 40a:	c1 1c       	adc	r12, r1
 40c:	d1 1c       	adc	r13, r1
		        {  if(Q!=1)
 40e:	21 e0       	ldi	r18, 0x01	; 1
 410:	a2 16       	cp	r10, r18
 412:	b1 04       	cpc	r11, r1
 414:	d9 f0       	breq	.+54     	; 0x44c <main+0x1cc>
                    {	
					lcd_cmd(0x01);
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
 41c:	c1 01       	movw	r24, r2
 41e:	01 97       	sbiw	r24, 0x01	; 1
 420:	f1 f7       	brne	.-4      	; 0x41e <main+0x19e>
                    _delay_ms(10);
					W=(10*W)+2;
 422:	c8 01       	movw	r24, r16
 424:	88 0f       	add	r24, r24
 426:	99 1f       	adc	r25, r25
 428:	88 0f       	add	r24, r24
 42a:	99 1f       	adc	r25, r25
 42c:	08 0f       	add	r16, r24
 42e:	19 1f       	adc	r17, r25
 430:	0f 5f       	subi	r16, 0xFF	; 255
 432:	1f 4f       	sbci	r17, 0xFF	; 255
 434:	00 0f       	add	r16, r16
 436:	11 1f       	adc	r17, r17
					lcd_cmd(y);
 438:	8e 2d       	mov	r24, r14
 43a:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
					lcd_num(W);
 43e:	b8 01       	movw	r22, r16
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	0e 94 85 00 	call	0x10a	; 0x10a <lcd_num>
					 q1++;
					 y++;}
 448:	76 01       	movw	r14, r12
 44a:	13 c0       	rjmp	.+38     	; 0x472 <__stack+0x13>
                    else if(Q==1)
                    {D=(10*D)+2;
 44c:	ce 01       	movw	r24, r28
 44e:	88 0f       	add	r24, r24
 450:	99 1f       	adc	r25, r25
 452:	88 0f       	add	r24, r24
 454:	99 1f       	adc	r25, r25
 456:	c8 0f       	add	r28, r24
 458:	d9 1f       	adc	r29, r25
 45a:	21 96       	adiw	r28, 0x01	; 1
 45c:	cc 0f       	add	r28, r28
 45e:	dd 1f       	adc	r29, r29
					 y++;
 460:	76 01       	movw	r14, r12
					 lcd_cmd(y);
 462:	8c 2d       	mov	r24, r12
 464:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
					 lcd_num(D);
 468:	be 01       	movw	r22, r28
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	0e 94 85 00 	call	0x10a	; 0x10a <lcd_num>
 472:	88 e8       	ldi	r24, 0x88	; 136
 474:	93 e1       	ldi	r25, 0x13	; 19
 476:	e9 e1       	ldi	r30, 0x19	; 25
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	31 97       	sbiw	r30, 0x01	; 1
 47c:	f1 f7       	brne	.-4      	; 0x47a <__stack+0x1b>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 47e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 480:	d1 f7       	brne	.-12     	; 0x476 <__stack+0x17>
 482:	ae c2       	rjmp	.+1372   	; 0x9e0 <__stack+0x581>
					 q2++;}
					_delay_ms(500);     
          		 }
		     else if(A==3)
 484:	83 30       	cpi	r24, 0x03	; 3
 486:	91 05       	cpc	r25, r1
 488:	09 f0       	breq	.+2      	; 0x48c <__stack+0x2d>
 48a:	41 c0       	rjmp	.+130    	; 0x50e <__stack+0xaf>
 48c:	67 01       	movw	r12, r14
 48e:	08 94       	sec
 490:	c1 1c       	adc	r12, r1
 492:	d1 1c       	adc	r13, r1
		   		{   if(Q!=1)
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	a8 16       	cp	r10, r24
 498:	b1 04       	cpc	r11, r1
 49a:	e1 f0       	breq	.+56     	; 0x4d4 <__stack+0x75>
                    {
					lcd_cmd(0x01);
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
 4a2:	c1 01       	movw	r24, r2
 4a4:	01 97       	sbiw	r24, 0x01	; 1
 4a6:	f1 f7       	brne	.-4      	; 0x4a4 <__stack+0x45>
                    _delay_ms(10);
					W=(10*W)+3;
 4a8:	c8 01       	movw	r24, r16
 4aa:	f3 e0       	ldi	r31, 0x03	; 3
 4ac:	88 0f       	add	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	fa 95       	dec	r31
 4b2:	e1 f7       	brne	.-8      	; 0x4ac <__stack+0x4d>
 4b4:	00 0f       	add	r16, r16
 4b6:	11 1f       	adc	r17, r17
 4b8:	08 0f       	add	r16, r24
 4ba:	19 1f       	adc	r17, r25
 4bc:	0d 5f       	subi	r16, 0xFD	; 253
 4be:	1f 4f       	sbci	r17, 0xFF	; 255
					lcd_cmd(y);
 4c0:	8e 2d       	mov	r24, r14
 4c2:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
					lcd_num(W);
 4c6:	b8 01       	movw	r22, r16
 4c8:	80 e0       	ldi	r24, 0x00	; 0
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	0e 94 85 00 	call	0x10a	; 0x10a <lcd_num>
					 q1++;
					 y++;}
 4d0:	76 01       	movw	r14, r12
 4d2:	14 c0       	rjmp	.+40     	; 0x4fc <__stack+0x9d>
                    else if(Q==1)
                    {D=(10*D)+3;
 4d4:	ce 01       	movw	r24, r28
 4d6:	73 e0       	ldi	r23, 0x03	; 3
 4d8:	88 0f       	add	r24, r24
 4da:	99 1f       	adc	r25, r25
 4dc:	7a 95       	dec	r23
 4de:	e1 f7       	brne	.-8      	; 0x4d8 <__stack+0x79>
 4e0:	cc 0f       	add	r28, r28
 4e2:	dd 1f       	adc	r29, r29
 4e4:	c8 0f       	add	r28, r24
 4e6:	d9 1f       	adc	r29, r25
 4e8:	23 96       	adiw	r28, 0x03	; 3
					 y++;
 4ea:	76 01       	movw	r14, r12
					 lcd_cmd(y);
 4ec:	8c 2d       	mov	r24, r12
 4ee:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
					 lcd_num(D);
 4f2:	be 01       	movw	r22, r28
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	0e 94 85 00 	call	0x10a	; 0x10a <lcd_num>
 4fc:	88 e8       	ldi	r24, 0x88	; 136
 4fe:	93 e1       	ldi	r25, 0x13	; 19
 500:	e9 e1       	ldi	r30, 0x19	; 25
 502:	f0 e0       	ldi	r31, 0x00	; 0
 504:	31 97       	sbiw	r30, 0x01	; 1
 506:	f1 f7       	brne	.-4      	; 0x504 <__stack+0xa5>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 508:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 50a:	d1 f7       	brne	.-12     	; 0x500 <__stack+0xa1>
 50c:	69 c2       	rjmp	.+1234   	; 0x9e0 <__stack+0x581>
					 q2++;}
					_delay_ms(500);     
          		       }
			 else if(A==4)
 50e:	84 30       	cpi	r24, 0x04	; 4
 510:	91 05       	cpc	r25, r1
 512:	09 f0       	breq	.+2      	; 0x516 <__stack+0xb7>
 514:	41 c0       	rjmp	.+130    	; 0x598 <__stack+0x139>
 516:	67 01       	movw	r12, r14
 518:	08 94       	sec
 51a:	c1 1c       	adc	r12, r1
 51c:	d1 1c       	adc	r13, r1
		   		{    if(Q!=1)
 51e:	21 e0       	ldi	r18, 0x01	; 1
 520:	a2 16       	cp	r10, r18
 522:	b1 04       	cpc	r11, r1
 524:	e1 f0       	breq	.+56     	; 0x55e <__stack+0xff>
                   {lcd_cmd(0x01);
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
 52c:	c1 01       	movw	r24, r2
 52e:	01 97       	sbiw	r24, 0x01	; 1
 530:	f1 f7       	brne	.-4      	; 0x52e <__stack+0xcf>
                    _delay_ms(10);
					W=(10*W)+4;
 532:	c8 01       	movw	r24, r16
 534:	53 e0       	ldi	r21, 0x03	; 3
 536:	88 0f       	add	r24, r24
 538:	99 1f       	adc	r25, r25
 53a:	5a 95       	dec	r21
 53c:	e1 f7       	brne	.-8      	; 0x536 <__stack+0xd7>
 53e:	00 0f       	add	r16, r16
 540:	11 1f       	adc	r17, r17
 542:	08 0f       	add	r16, r24
 544:	19 1f       	adc	r17, r25
 546:	0c 5f       	subi	r16, 0xFC	; 252
 548:	1f 4f       	sbci	r17, 0xFF	; 255
					lcd_cmd(y);
 54a:	8e 2d       	mov	r24, r14
 54c:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
					lcd_num(W);
 550:	b8 01       	movw	r22, r16
 552:	80 e0       	ldi	r24, 0x00	; 0
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	0e 94 85 00 	call	0x10a	; 0x10a <lcd_num>
					 q1++;
					 y++;}
 55a:	76 01       	movw	r14, r12
 55c:	14 c0       	rjmp	.+40     	; 0x586 <__stack+0x127>
                    else if(Q==1)
                    {D=(10*D)+4;
 55e:	ce 01       	movw	r24, r28
 560:	33 e0       	ldi	r19, 0x03	; 3
 562:	88 0f       	add	r24, r24
 564:	99 1f       	adc	r25, r25
 566:	3a 95       	dec	r19
 568:	e1 f7       	brne	.-8      	; 0x562 <__stack+0x103>
 56a:	cc 0f       	add	r28, r28
 56c:	dd 1f       	adc	r29, r29
 56e:	c8 0f       	add	r28, r24
 570:	d9 1f       	adc	r29, r25
 572:	24 96       	adiw	r28, 0x04	; 4
					 y++;
 574:	76 01       	movw	r14, r12
					 lcd_cmd(y);
 576:	8c 2d       	mov	r24, r12
 578:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
					 lcd_num(D);
 57c:	be 01       	movw	r22, r28
 57e:	80 e0       	ldi	r24, 0x00	; 0
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	0e 94 85 00 	call	0x10a	; 0x10a <lcd_num>
 586:	88 e8       	ldi	r24, 0x88	; 136
 588:	93 e1       	ldi	r25, 0x13	; 19
 58a:	e9 e1       	ldi	r30, 0x19	; 25
 58c:	f0 e0       	ldi	r31, 0x00	; 0
 58e:	31 97       	sbiw	r30, 0x01	; 1
 590:	f1 f7       	brne	.-4      	; 0x58e <__stack+0x12f>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 592:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 594:	d1 f7       	brne	.-12     	; 0x58a <__stack+0x12b>
 596:	24 c2       	rjmp	.+1096   	; 0x9e0 <__stack+0x581>
					 q2++;}
					_delay_ms(500);     
    			 }
			 else if(A==5)
 598:	85 30       	cpi	r24, 0x05	; 5
 59a:	91 05       	cpc	r25, r1
 59c:	09 f0       	breq	.+2      	; 0x5a0 <__stack+0x141>
 59e:	41 c0       	rjmp	.+130    	; 0x622 <__stack+0x1c3>
 5a0:	67 01       	movw	r12, r14
 5a2:	08 94       	sec
 5a4:	c1 1c       	adc	r12, r1
 5a6:	d1 1c       	adc	r13, r1
		  	    {   if(Q!=1)
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	a8 16       	cp	r10, r24
 5ac:	b1 04       	cpc	r11, r1
 5ae:	e1 f0       	breq	.+56     	; 0x5e8 <__stack+0x189>
                    {
					lcd_cmd(0x01);
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
 5b6:	c1 01       	movw	r24, r2
 5b8:	01 97       	sbiw	r24, 0x01	; 1
 5ba:	f1 f7       	brne	.-4      	; 0x5b8 <__stack+0x159>
                    _delay_ms(10);
					W=(10*W)+5;
 5bc:	c8 01       	movw	r24, r16
 5be:	b3 e0       	ldi	r27, 0x03	; 3
 5c0:	88 0f       	add	r24, r24
 5c2:	99 1f       	adc	r25, r25
 5c4:	ba 95       	dec	r27
 5c6:	e1 f7       	brne	.-8      	; 0x5c0 <__stack+0x161>
 5c8:	00 0f       	add	r16, r16
 5ca:	11 1f       	adc	r17, r17
 5cc:	08 0f       	add	r16, r24
 5ce:	19 1f       	adc	r17, r25
 5d0:	0b 5f       	subi	r16, 0xFB	; 251
 5d2:	1f 4f       	sbci	r17, 0xFF	; 255
					lcd_cmd(y);
 5d4:	8e 2d       	mov	r24, r14
 5d6:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
					lcd_num(W);
 5da:	b8 01       	movw	r22, r16
 5dc:	80 e0       	ldi	r24, 0x00	; 0
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	0e 94 85 00 	call	0x10a	; 0x10a <lcd_num>
					 q1++;
					 y++;}
 5e4:	76 01       	movw	r14, r12
 5e6:	14 c0       	rjmp	.+40     	; 0x610 <__stack+0x1b1>
                    else if(Q==1)
                    {D=(10*D)+5;
 5e8:	ce 01       	movw	r24, r28
 5ea:	f3 e0       	ldi	r31, 0x03	; 3
 5ec:	88 0f       	add	r24, r24
 5ee:	99 1f       	adc	r25, r25
 5f0:	fa 95       	dec	r31
 5f2:	e1 f7       	brne	.-8      	; 0x5ec <__stack+0x18d>
 5f4:	cc 0f       	add	r28, r28
 5f6:	dd 1f       	adc	r29, r29
 5f8:	c8 0f       	add	r28, r24
 5fa:	d9 1f       	adc	r29, r25
 5fc:	25 96       	adiw	r28, 0x05	; 5
					 y++;
 5fe:	76 01       	movw	r14, r12
					 lcd_cmd(y);
 600:	8c 2d       	mov	r24, r12
 602:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
					 lcd_num(D);
 606:	be 01       	movw	r22, r28
 608:	80 e0       	ldi	r24, 0x00	; 0
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	0e 94 85 00 	call	0x10a	; 0x10a <lcd_num>
 610:	88 e8       	ldi	r24, 0x88	; 136
 612:	93 e1       	ldi	r25, 0x13	; 19
 614:	e9 e1       	ldi	r30, 0x19	; 25
 616:	f0 e0       	ldi	r31, 0x00	; 0
 618:	31 97       	sbiw	r30, 0x01	; 1
 61a:	f1 f7       	brne	.-4      	; 0x618 <__stack+0x1b9>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 61c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 61e:	d1 f7       	brne	.-12     	; 0x614 <__stack+0x1b5>
 620:	df c1       	rjmp	.+958    	; 0x9e0 <__stack+0x581>
					 q2++;}
					_delay_ms(500);     
    			 }
		     else if(A==6)
 622:	86 30       	cpi	r24, 0x06	; 6
 624:	91 05       	cpc	r25, r1
 626:	09 f0       	breq	.+2      	; 0x62a <__stack+0x1cb>
 628:	41 c0       	rjmp	.+130    	; 0x6ac <__stack+0x24d>
 62a:	67 01       	movw	r12, r14
 62c:	08 94       	sec
 62e:	c1 1c       	adc	r12, r1
 630:	d1 1c       	adc	r13, r1
		        {    if(Q!=1)
 632:	21 e0       	ldi	r18, 0x01	; 1
 634:	a2 16       	cp	r10, r18
 636:	b1 04       	cpc	r11, r1
 638:	e1 f0       	breq	.+56     	; 0x672 <__stack+0x213>
                    {
					lcd_cmd(0x01);
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
 640:	c1 01       	movw	r24, r2
 642:	01 97       	sbiw	r24, 0x01	; 1
 644:	f1 f7       	brne	.-4      	; 0x642 <__stack+0x1e3>
                    _delay_ms(10);
					W=(10*W)+6;
 646:	c8 01       	movw	r24, r16
 648:	73 e0       	ldi	r23, 0x03	; 3
 64a:	88 0f       	add	r24, r24
 64c:	99 1f       	adc	r25, r25
 64e:	7a 95       	dec	r23
 650:	e1 f7       	brne	.-8      	; 0x64a <__stack+0x1eb>
 652:	00 0f       	add	r16, r16
 654:	11 1f       	adc	r17, r17
 656:	08 0f       	add	r16, r24
 658:	19 1f       	adc	r17, r25
 65a:	0a 5f       	subi	r16, 0xFA	; 250
 65c:	1f 4f       	sbci	r17, 0xFF	; 255
					lcd_cmd(y);
 65e:	8e 2d       	mov	r24, r14
 660:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
					lcd_num(W);
 664:	b8 01       	movw	r22, r16
 666:	80 e0       	ldi	r24, 0x00	; 0
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	0e 94 85 00 	call	0x10a	; 0x10a <lcd_num>
					 q1++;
					 y++;}
 66e:	76 01       	movw	r14, r12
 670:	14 c0       	rjmp	.+40     	; 0x69a <__stack+0x23b>
                    else if(Q==1)
                    {D=(10*D)+6;
 672:	ce 01       	movw	r24, r28
 674:	53 e0       	ldi	r21, 0x03	; 3
 676:	88 0f       	add	r24, r24
 678:	99 1f       	adc	r25, r25
 67a:	5a 95       	dec	r21
 67c:	e1 f7       	brne	.-8      	; 0x676 <__stack+0x217>
 67e:	cc 0f       	add	r28, r28
 680:	dd 1f       	adc	r29, r29
 682:	c8 0f       	add	r28, r24
 684:	d9 1f       	adc	r29, r25
 686:	26 96       	adiw	r28, 0x06	; 6
					 y++;
 688:	76 01       	movw	r14, r12
					 lcd_cmd(y);
 68a:	8c 2d       	mov	r24, r12
 68c:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
					 lcd_num(D);
 690:	be 01       	movw	r22, r28
 692:	80 e0       	ldi	r24, 0x00	; 0
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	0e 94 85 00 	call	0x10a	; 0x10a <lcd_num>
 69a:	88 e8       	ldi	r24, 0x88	; 136
 69c:	93 e1       	ldi	r25, 0x13	; 19
 69e:	e9 e1       	ldi	r30, 0x19	; 25
 6a0:	f0 e0       	ldi	r31, 0x00	; 0
 6a2:	31 97       	sbiw	r30, 0x01	; 1
 6a4:	f1 f7       	brne	.-4      	; 0x6a2 <__stack+0x243>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 6a6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 6a8:	d1 f7       	brne	.-12     	; 0x69e <__stack+0x23f>
 6aa:	9a c1       	rjmp	.+820    	; 0x9e0 <__stack+0x581>
					 q2++;}
					_delay_ms(500);     
    			 }
	         else if(A==7)
 6ac:	87 30       	cpi	r24, 0x07	; 7
 6ae:	91 05       	cpc	r25, r1
 6b0:	09 f0       	breq	.+2      	; 0x6b4 <__stack+0x255>
 6b2:	41 c0       	rjmp	.+130    	; 0x736 <__stack+0x2d7>
 6b4:	67 01       	movw	r12, r14
 6b6:	08 94       	sec
 6b8:	c1 1c       	adc	r12, r1
 6ba:	d1 1c       	adc	r13, r1
		        {    if(Q!=1)
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	a8 16       	cp	r10, r24
 6c0:	b1 04       	cpc	r11, r1
 6c2:	e1 f0       	breq	.+56     	; 0x6fc <__stack+0x29d>
                    {
					lcd_cmd(0x01);
 6c4:	81 e0       	ldi	r24, 0x01	; 1
 6c6:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
 6ca:	c1 01       	movw	r24, r2
 6cc:	01 97       	sbiw	r24, 0x01	; 1
 6ce:	f1 f7       	brne	.-4      	; 0x6cc <__stack+0x26d>
                    _delay_ms(10);
					W=(10*W)+7;
 6d0:	c8 01       	movw	r24, r16
 6d2:	33 e0       	ldi	r19, 0x03	; 3
 6d4:	88 0f       	add	r24, r24
 6d6:	99 1f       	adc	r25, r25
 6d8:	3a 95       	dec	r19
 6da:	e1 f7       	brne	.-8      	; 0x6d4 <__stack+0x275>
 6dc:	00 0f       	add	r16, r16
 6de:	11 1f       	adc	r17, r17
 6e0:	08 0f       	add	r16, r24
 6e2:	19 1f       	adc	r17, r25
 6e4:	09 5f       	subi	r16, 0xF9	; 249
 6e6:	1f 4f       	sbci	r17, 0xFF	; 255
					lcd_cmd(y);
 6e8:	8e 2d       	mov	r24, r14
 6ea:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
					lcd_num(W);
 6ee:	b8 01       	movw	r22, r16
 6f0:	80 e0       	ldi	r24, 0x00	; 0
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	0e 94 85 00 	call	0x10a	; 0x10a <lcd_num>
					 q1++;
					 y++;}
 6f8:	76 01       	movw	r14, r12
 6fa:	14 c0       	rjmp	.+40     	; 0x724 <__stack+0x2c5>
                    else if(Q==1)
                    {D=(10*D)+7;
 6fc:	ce 01       	movw	r24, r28
 6fe:	b3 e0       	ldi	r27, 0x03	; 3
 700:	88 0f       	add	r24, r24
 702:	99 1f       	adc	r25, r25
 704:	ba 95       	dec	r27
 706:	e1 f7       	brne	.-8      	; 0x700 <__stack+0x2a1>
 708:	cc 0f       	add	r28, r28
 70a:	dd 1f       	adc	r29, r29
 70c:	c8 0f       	add	r28, r24
 70e:	d9 1f       	adc	r29, r25
 710:	27 96       	adiw	r28, 0x07	; 7
					 y++;
 712:	76 01       	movw	r14, r12
					 lcd_cmd(y);
 714:	8c 2d       	mov	r24, r12
 716:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
					 lcd_num(D);
 71a:	be 01       	movw	r22, r28
 71c:	80 e0       	ldi	r24, 0x00	; 0
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	0e 94 85 00 	call	0x10a	; 0x10a <lcd_num>
 724:	88 e8       	ldi	r24, 0x88	; 136
 726:	93 e1       	ldi	r25, 0x13	; 19
 728:	e9 e1       	ldi	r30, 0x19	; 25
 72a:	f0 e0       	ldi	r31, 0x00	; 0
 72c:	31 97       	sbiw	r30, 0x01	; 1
 72e:	f1 f7       	brne	.-4      	; 0x72c <__stack+0x2cd>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 730:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 732:	d1 f7       	brne	.-12     	; 0x728 <__stack+0x2c9>
 734:	55 c1       	rjmp	.+682    	; 0x9e0 <__stack+0x581>
					 q2++;}
					_delay_ms(500);     
    			 }
		     else if(A==8)
 736:	88 30       	cpi	r24, 0x08	; 8
 738:	91 05       	cpc	r25, r1
 73a:	09 f0       	breq	.+2      	; 0x73e <__stack+0x2df>
 73c:	41 c0       	rjmp	.+130    	; 0x7c0 <__stack+0x361>
 73e:	67 01       	movw	r12, r14
 740:	08 94       	sec
 742:	c1 1c       	adc	r12, r1
 744:	d1 1c       	adc	r13, r1
		        {   if(Q!=1)
 746:	21 e0       	ldi	r18, 0x01	; 1
 748:	a2 16       	cp	r10, r18
 74a:	b1 04       	cpc	r11, r1
 74c:	e1 f0       	breq	.+56     	; 0x786 <__stack+0x327>
                    {
					lcd_cmd(0x01);
 74e:	81 e0       	ldi	r24, 0x01	; 1
 750:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
 754:	c1 01       	movw	r24, r2
 756:	01 97       	sbiw	r24, 0x01	; 1
 758:	f1 f7       	brne	.-4      	; 0x756 <__stack+0x2f7>
                    _delay_ms(10);
					W=(10*W)+8;
 75a:	c8 01       	movw	r24, r16
 75c:	f3 e0       	ldi	r31, 0x03	; 3
 75e:	88 0f       	add	r24, r24
 760:	99 1f       	adc	r25, r25
 762:	fa 95       	dec	r31
 764:	e1 f7       	brne	.-8      	; 0x75e <__stack+0x2ff>
 766:	00 0f       	add	r16, r16
 768:	11 1f       	adc	r17, r17
 76a:	08 0f       	add	r16, r24
 76c:	19 1f       	adc	r17, r25
 76e:	08 5f       	subi	r16, 0xF8	; 248
 770:	1f 4f       	sbci	r17, 0xFF	; 255
					lcd_cmd(y);
 772:	8e 2d       	mov	r24, r14
 774:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
					lcd_num(W);
 778:	b8 01       	movw	r22, r16
 77a:	80 e0       	ldi	r24, 0x00	; 0
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	0e 94 85 00 	call	0x10a	; 0x10a <lcd_num>
					 q1++;
					 y++;}
 782:	76 01       	movw	r14, r12
 784:	14 c0       	rjmp	.+40     	; 0x7ae <__stack+0x34f>
                    else if(Q==1)
                    {D=(10*D)+8;
 786:	ce 01       	movw	r24, r28
 788:	73 e0       	ldi	r23, 0x03	; 3
 78a:	88 0f       	add	r24, r24
 78c:	99 1f       	adc	r25, r25
 78e:	7a 95       	dec	r23
 790:	e1 f7       	brne	.-8      	; 0x78a <__stack+0x32b>
 792:	cc 0f       	add	r28, r28
 794:	dd 1f       	adc	r29, r29
 796:	c8 0f       	add	r28, r24
 798:	d9 1f       	adc	r29, r25
 79a:	28 96       	adiw	r28, 0x08	; 8
					 y++;
 79c:	76 01       	movw	r14, r12
					 lcd_cmd(y);
 79e:	8c 2d       	mov	r24, r12
 7a0:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
					 lcd_num(D);
 7a4:	be 01       	movw	r22, r28
 7a6:	80 e0       	ldi	r24, 0x00	; 0
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	0e 94 85 00 	call	0x10a	; 0x10a <lcd_num>
 7ae:	88 e8       	ldi	r24, 0x88	; 136
 7b0:	93 e1       	ldi	r25, 0x13	; 19
 7b2:	e9 e1       	ldi	r30, 0x19	; 25
 7b4:	f0 e0       	ldi	r31, 0x00	; 0
 7b6:	31 97       	sbiw	r30, 0x01	; 1
 7b8:	f1 f7       	brne	.-4      	; 0x7b6 <__stack+0x357>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 7ba:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 7bc:	d1 f7       	brne	.-12     	; 0x7b2 <__stack+0x353>
 7be:	10 c1       	rjmp	.+544    	; 0x9e0 <__stack+0x581>
					 q2++;}
					_delay_ms(500);     
    			 }
		     else if(A==9)
 7c0:	89 30       	cpi	r24, 0x09	; 9
 7c2:	91 05       	cpc	r25, r1
 7c4:	09 f0       	breq	.+2      	; 0x7c8 <__stack+0x369>
 7c6:	41 c0       	rjmp	.+130    	; 0x84a <__stack+0x3eb>
 7c8:	67 01       	movw	r12, r14
 7ca:	08 94       	sec
 7cc:	c1 1c       	adc	r12, r1
 7ce:	d1 1c       	adc	r13, r1
		        {   if(Q!=1)
 7d0:	81 e0       	ldi	r24, 0x01	; 1
 7d2:	a8 16       	cp	r10, r24
 7d4:	b1 04       	cpc	r11, r1
 7d6:	e1 f0       	breq	.+56     	; 0x810 <__stack+0x3b1>
                    {
					lcd_cmd(0x01);
 7d8:	81 e0       	ldi	r24, 0x01	; 1
 7da:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
 7de:	c1 01       	movw	r24, r2
 7e0:	01 97       	sbiw	r24, 0x01	; 1
 7e2:	f1 f7       	brne	.-4      	; 0x7e0 <__stack+0x381>
                    _delay_ms(10);
					W=(10*W)+9;
 7e4:	c8 01       	movw	r24, r16
 7e6:	53 e0       	ldi	r21, 0x03	; 3
 7e8:	88 0f       	add	r24, r24
 7ea:	99 1f       	adc	r25, r25
 7ec:	5a 95       	dec	r21
 7ee:	e1 f7       	brne	.-8      	; 0x7e8 <__stack+0x389>
 7f0:	00 0f       	add	r16, r16
 7f2:	11 1f       	adc	r17, r17
 7f4:	08 0f       	add	r16, r24
 7f6:	19 1f       	adc	r17, r25
 7f8:	07 5f       	subi	r16, 0xF7	; 247
 7fa:	1f 4f       	sbci	r17, 0xFF	; 255
					lcd_cmd(y);
 7fc:	8e 2d       	mov	r24, r14
 7fe:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
					lcd_num(W);
 802:	b8 01       	movw	r22, r16
 804:	80 e0       	ldi	r24, 0x00	; 0
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	0e 94 85 00 	call	0x10a	; 0x10a <lcd_num>
					 q1++;
					 y++;}
 80c:	76 01       	movw	r14, r12
 80e:	14 c0       	rjmp	.+40     	; 0x838 <__stack+0x3d9>
                    else if(Q==1)
                    {D=(10*D)+9;
 810:	ce 01       	movw	r24, r28
 812:	33 e0       	ldi	r19, 0x03	; 3
 814:	88 0f       	add	r24, r24
 816:	99 1f       	adc	r25, r25
 818:	3a 95       	dec	r19
 81a:	e1 f7       	brne	.-8      	; 0x814 <__stack+0x3b5>
 81c:	cc 0f       	add	r28, r28
 81e:	dd 1f       	adc	r29, r29
 820:	c8 0f       	add	r28, r24
 822:	d9 1f       	adc	r29, r25
 824:	29 96       	adiw	r28, 0x09	; 9
					 y++;
 826:	76 01       	movw	r14, r12
					 lcd_cmd(y);
 828:	8c 2d       	mov	r24, r12
 82a:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
					 lcd_num(D);
 82e:	be 01       	movw	r22, r28
 830:	80 e0       	ldi	r24, 0x00	; 0
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	0e 94 85 00 	call	0x10a	; 0x10a <lcd_num>
 838:	88 e8       	ldi	r24, 0x88	; 136
 83a:	93 e1       	ldi	r25, 0x13	; 19
 83c:	e9 e1       	ldi	r30, 0x19	; 25
 83e:	f0 e0       	ldi	r31, 0x00	; 0
 840:	31 97       	sbiw	r30, 0x01	; 1
 842:	f1 f7       	brne	.-4      	; 0x840 <__stack+0x3e1>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 844:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 846:	d1 f7       	brne	.-12     	; 0x83c <__stack+0x3dd>
 848:	cb c0       	rjmp	.+406    	; 0x9e0 <__stack+0x581>
					 q2++;}
					_delay_ms(500);     
    			 }
		     else if(A==10)
 84a:	8a 30       	cpi	r24, 0x0A	; 10
 84c:	91 05       	cpc	r25, r1
 84e:	51 f4       	brne	.+20     	; 0x864 <__stack+0x405>
		        {lcd_cmd(y);
 850:	8e 2d       	mov	r24, r14
 852:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
		         lcd_data('+');
 856:	8b e2       	ldi	r24, 0x2B	; 43
 858:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_data>
 85c:	9a e0       	ldi	r25, 0x0A	; 10
 85e:	49 2e       	mov	r4, r25
 860:	51 2c       	mov	r5, r1
 862:	0c c0       	rjmp	.+24     	; 0x87c <__stack+0x41d>
		     	S=A;
				Q=1;}
			 else if(A==11)
 864:	8b 30       	cpi	r24, 0x0B	; 11
 866:	91 05       	cpc	r25, r1
 868:	69 f4       	brne	.+26     	; 0x884 <__stack+0x425>
		        {lcd_cmd(y);
 86a:	8e 2d       	mov	r24, r14
 86c:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
		         lcd_data('-');
 870:	8d e2       	ldi	r24, 0x2D	; 45
 872:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_data>
 876:	8b e0       	ldi	r24, 0x0B	; 11
 878:	48 2e       	mov	r4, r24
 87a:	51 2c       	mov	r5, r1
 87c:	b1 e0       	ldi	r27, 0x01	; 1
 87e:	ab 2e       	mov	r10, r27
 880:	b1 2c       	mov	r11, r1
 882:	ae c0       	rjmp	.+348    	; 0x9e0 <__stack+0x581>
		     	S=A;
				Q=1;}
             else if(A==12)
 884:	8c 30       	cpi	r24, 0x0C	; 12
 886:	91 05       	cpc	r25, r1
 888:	51 f4       	brne	.+20     	; 0x89e <__stack+0x43f>
		        {lcd_cmd(y);
 88a:	8e 2d       	mov	r24, r14
 88c:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
		         lcd_data('X');
 890:	88 e5       	ldi	r24, 0x58	; 88
 892:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_data>
 896:	ac e0       	ldi	r26, 0x0C	; 12
 898:	4a 2e       	mov	r4, r26
 89a:	51 2c       	mov	r5, r1
 89c:	ef cf       	rjmp	.-34     	; 0x87c <__stack+0x41d>
 		     	S=A;
				Q=1;}
             else if(A==13)
 89e:	8d 30       	cpi	r24, 0x0D	; 13
 8a0:	91 05       	cpc	r25, r1
 8a2:	51 f4       	brne	.+20     	; 0x8b8 <__stack+0x459>
		        {lcd_cmd(y);
 8a4:	8e 2d       	mov	r24, r14
 8a6:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
		         lcd_data('/');
 8aa:	8f e2       	ldi	r24, 0x2F	; 47
 8ac:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_data>
 8b0:	fd e0       	ldi	r31, 0x0D	; 13
 8b2:	4f 2e       	mov	r4, r31
 8b4:	51 2c       	mov	r5, r1
 8b6:	e2 cf       	rjmp	.-60     	; 0x87c <__stack+0x41d>
		     	S=A;
				Q=1;}		
	     	 else if(A==15)
 8b8:	8f 30       	cpi	r24, 0x0F	; 15
 8ba:	91 05       	cpc	r25, r1
 8bc:	09 f0       	breq	.+2      	; 0x8c0 <__stack+0x461>
 8be:	74 c0       	rjmp	.+232    	; 0x9a8 <__stack+0x549>
	           {
  				if (S==10)
 8c0:	2a e0       	ldi	r18, 0x0A	; 10
 8c2:	42 16       	cp	r4, r18
 8c4:	51 04       	cpc	r5, r1
 8c6:	21 f4       	brne	.+8      	; 0x8d0 <__stack+0x471>
int add(W,D)
{
 long E;
 E=W+D;
 8c8:	ce 01       	movw	r24, r28
 8ca:	80 0f       	add	r24, r16
 8cc:	91 1f       	adc	r25, r17
 8ce:	2d c0       	rjmp	.+90     	; 0x92a <__stack+0x4cb>
				 {E=add(W,D);}
				else if (S==11)
 8d0:	8b e0       	ldi	r24, 0x0B	; 11
 8d2:	48 16       	cp	r4, r24
 8d4:	51 04       	cpc	r5, r1
 8d6:	a9 f4       	brne	.+42     	; 0x902 <__stack+0x4a3>
}

int subtract(W,D)
{
 long E;
 if(W>D)
 8d8:	c0 17       	cp	r28, r16
 8da:	d1 07       	cpc	r29, r17
 8dc:	24 f4       	brge	.+8      	; 0x8e6 <__stack+0x487>
 {E=W-D;}
 8de:	c8 01       	movw	r24, r16
 8e0:	8c 1b       	sub	r24, r28
 8e2:	9d 0b       	sbc	r25, r29
 8e4:	03 c0       	rjmp	.+6      	; 0x8ec <__stack+0x48d>
 else
 {E=D-W;} 
 8e6:	ce 01       	movw	r24, r28
 8e8:	80 1b       	sub	r24, r16
 8ea:	91 0b       	sbc	r25, r17
 8ec:	9c 01       	movw	r18, r24
 8ee:	44 27       	eor	r20, r20
 8f0:	37 fd       	sbrc	r19, 7
 8f2:	40 95       	com	r20
 8f4:	54 2f       	mov	r21, r20
				 {E=subtract(W,D);}
 8f6:	39 01       	movw	r6, r18
 8f8:	88 24       	eor	r8, r8
 8fa:	77 fc       	sbrc	r7, 7
 8fc:	80 94       	com	r8
 8fe:	98 2c       	mov	r9, r8
 900:	19 c0       	rjmp	.+50     	; 0x934 <__stack+0x4d5>
				else if (S==12)
 902:	2c e0       	ldi	r18, 0x0C	; 12
 904:	42 16       	cp	r4, r18
 906:	51 04       	cpc	r5, r1
 908:	41 f4       	brne	.+16     	; 0x91a <__stack+0x4bb>
 return E ;
}
int multiply(W,D)
{
 long E;
 E=W*D;
 90a:	c0 9f       	mul	r28, r16
 90c:	c0 01       	movw	r24, r0
 90e:	c1 9f       	mul	r28, r17
 910:	90 0d       	add	r25, r0
 912:	d0 9f       	mul	r29, r16
 914:	90 0d       	add	r25, r0
 916:	11 24       	eor	r1, r1
 918:	08 c0       	rjmp	.+16     	; 0x92a <__stack+0x4cb>
				 {E=multiply(W,D);}
				else if (S==13)
 91a:	8d e0       	ldi	r24, 0x0D	; 13
 91c:	48 16       	cp	r4, r24
 91e:	51 04       	cpc	r5, r1
 920:	49 f4       	brne	.+18     	; 0x934 <__stack+0x4d5>
				 {E=divide(W,D);}
 922:	c8 01       	movw	r24, r16
 924:	be 01       	movw	r22, r28
 926:	0e 94 3c 01 	call	0x278	; 0x278 <divide>
 92a:	3c 01       	movw	r6, r24
 92c:	88 24       	eor	r8, r8
 92e:	77 fc       	sbrc	r7, 7
 930:	80 94       	com	r8
 932:	98 2c       	mov	r9, r8
				lcd_cmd(0xcf);
 934:	8f ec       	ldi	r24, 0xCF	; 207
 936:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
	            lcd_num(E);
 93a:	c4 01       	movw	r24, r8
 93c:	b3 01       	movw	r22, r6
 93e:	0e 94 85 00 	call	0x10a	; 0x10a <lcd_num>
                 if((D>W)&&(S==11))
 942:	0c 17       	cp	r16, r28
 944:	1d 07       	cpc	r17, r29
 946:	08 f0       	brcs	.+2      	; 0x94a <__stack+0x4eb>
 948:	4b c0       	rjmp	.+150    	; 0x9e0 <__stack+0x581>
 94a:	2b e0       	ldi	r18, 0x0B	; 11
 94c:	42 16       	cp	r4, r18
 94e:	51 04       	cpc	r5, r1
 950:	09 f0       	breq	.+2      	; 0x954 <__stack+0x4f5>
 952:	46 c0       	rjmp	.+140    	; 0x9e0 <__stack+0x581>
 954:	e1 e0       	ldi	r30, 0x01	; 1
 956:	ce 2e       	mov	r12, r30
 958:	d1 2c       	mov	r13, r1
				 { for(n=1;n<=15;n++)
				   {E=E/10;
 95a:	c4 01       	movw	r24, r8
 95c:	b3 01       	movw	r22, r6
 95e:	2a e0       	ldi	r18, 0x0A	; 10
 960:	30 e0       	ldi	r19, 0x00	; 0
 962:	40 e0       	ldi	r20, 0x00	; 0
 964:	50 e0       	ldi	r21, 0x00	; 0
 966:	0e 94 2a 05 	call	0xa54	; 0xa54 <__divmodsi4>
 96a:	c9 01       	movw	r24, r18
 96c:	da 01       	movw	r26, r20
 96e:	3c 01       	movw	r6, r24
 970:	4d 01       	movw	r8, r26
#include "lcd.h"
#include "keypad.h"
#include "operations.h"

void main ()
{
 972:	c6 01       	movw	r24, r12
 974:	08 94       	sec
 976:	c1 1c       	adc	r12, r1
 978:	d1 1c       	adc	r13, r1
	            lcd_num(E);
                 if((D>W)&&(S==11))
				 { for(n=1;n<=15;n++)
				   {E=E/10;
				     n++;
				     if (E<=1)
 97a:	22 e0       	ldi	r18, 0x02	; 2
 97c:	62 16       	cp	r6, r18
 97e:	71 04       	cpc	r7, r1
 980:	81 04       	cpc	r8, r1
 982:	91 04       	cpc	r9, r1
 984:	4c f0       	brlt	.+18     	; 0x998 <__stack+0x539>
					  {break;}
 986:	72 e0       	ldi	r23, 0x02	; 2
 988:	c7 2e       	mov	r12, r23
 98a:	d1 2c       	mov	r13, r1
 98c:	c8 0e       	add	r12, r24
 98e:	d9 1e       	adc	r13, r25
				else if (S==13)
				 {E=divide(W,D);}
				lcd_cmd(0xcf);
	            lcd_num(E);
                 if((D>W)&&(S==11))
				 { for(n=1;n<=15;n++)
 990:	81 e1       	ldi	r24, 0x11	; 17
 992:	c8 16       	cp	r12, r24
 994:	d1 04       	cpc	r13, r1
 996:	09 f7       	brne	.-62     	; 0x95a <__stack+0x4fb>
				   {E=E/10;
				     n++;
				     if (E<=1)
					  {break;}
					}
				  lcd_cmd(z-n);
 998:	8f ec       	ldi	r24, 0xCF	; 207
 99a:	8c 19       	sub	r24, r12
 99c:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
				  lcd_data('-'); }
 9a0:	8d e2       	ldi	r24, 0x2D	; 45
 9a2:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_data>
 9a6:	1c c0       	rjmp	.+56     	; 0x9e0 <__stack+0x581>
			    }
	       else if(A==16)
 9a8:	40 97       	sbiw	r24, 0x10	; 16
 9aa:	d1 f4       	brne	.+52     	; 0x9e0 <__stack+0x581>
	           {
			   lcd_cmd(0x01);
 9ac:	81 e0       	ldi	r24, 0x01	; 1
 9ae:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
 9b2:	c1 01       	movw	r24, r2
 9b4:	01 97       	sbiw	r24, 0x01	; 1
 9b6:	f1 f7       	brne	.-4      	; 0x9b4 <__stack+0x555>
			   _delay_ms(10);
			     lcd_cmd(0x80);
 9b8:	80 e8       	ldi	r24, 0x80	; 128
 9ba:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
                 lcd_data('0');
 9be:	80 e3       	ldi	r24, 0x30	; 48
 9c0:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_data>
 9c4:	60 e8       	ldi	r22, 0x80	; 128
 9c6:	e6 2e       	mov	r14, r22
 9c8:	f1 2c       	mov	r15, r1
 9ca:	00 e0       	ldi	r16, 0x00	; 0
 9cc:	10 e0       	ldi	r17, 0x00	; 0
 9ce:	c0 e0       	ldi	r28, 0x00	; 0
 9d0:	d0 e0       	ldi	r29, 0x00	; 0
 9d2:	44 24       	eor	r4, r4
 9d4:	55 24       	eor	r5, r5
 9d6:	aa 24       	eor	r10, r10
 9d8:	bb 24       	eor	r11, r11
 9da:	66 24       	eor	r6, r6
 9dc:	77 24       	eor	r7, r7
 9de:	43 01       	movw	r8, r6
	_delay_ms(100);*/ 
	 lcd_cmd(0x01);
    _delay_ms(10);
	lcd_cmd(0x80);
     lcd_data('0');
    	  while (PORTA!=0xff)
 9e0:	8b b3       	in	r24, 0x1b	; 27
 9e2:	8f 3f       	cpi	r24, 0xFF	; 255
 9e4:	09 f4       	brne	.+2      	; 0x9e8 <__stack+0x589>
 9e6:	72 cc       	rjmp	.-1820   	; 0x2cc <main+0x4c>
 9e8:	82 cc       	rjmp	.-1788   	; 0x2ee <main+0x6e>

000009ea <__divmodhi4>:
 9ea:	97 fb       	bst	r25, 7
 9ec:	09 2e       	mov	r0, r25
 9ee:	07 26       	eor	r0, r23
 9f0:	0a d0       	rcall	.+20     	; 0xa06 <__divmodhi4_neg1>
 9f2:	77 fd       	sbrc	r23, 7
 9f4:	04 d0       	rcall	.+8      	; 0x9fe <__divmodhi4_neg2>
 9f6:	49 d0       	rcall	.+146    	; 0xa8a <__udivmodhi4>
 9f8:	06 d0       	rcall	.+12     	; 0xa06 <__divmodhi4_neg1>
 9fa:	00 20       	and	r0, r0
 9fc:	1a f4       	brpl	.+6      	; 0xa04 <__divmodhi4_exit>

000009fe <__divmodhi4_neg2>:
 9fe:	70 95       	com	r23
 a00:	61 95       	neg	r22
 a02:	7f 4f       	sbci	r23, 0xFF	; 255

00000a04 <__divmodhi4_exit>:
 a04:	08 95       	ret

00000a06 <__divmodhi4_neg1>:
 a06:	f6 f7       	brtc	.-4      	; 0xa04 <__divmodhi4_exit>
 a08:	90 95       	com	r25
 a0a:	81 95       	neg	r24
 a0c:	9f 4f       	sbci	r25, 0xFF	; 255
 a0e:	08 95       	ret

00000a10 <__udivmodsi4>:
 a10:	a1 e2       	ldi	r26, 0x21	; 33
 a12:	1a 2e       	mov	r1, r26
 a14:	aa 1b       	sub	r26, r26
 a16:	bb 1b       	sub	r27, r27
 a18:	fd 01       	movw	r30, r26
 a1a:	0d c0       	rjmp	.+26     	; 0xa36 <__udivmodsi4_ep>

00000a1c <__udivmodsi4_loop>:
 a1c:	aa 1f       	adc	r26, r26
 a1e:	bb 1f       	adc	r27, r27
 a20:	ee 1f       	adc	r30, r30
 a22:	ff 1f       	adc	r31, r31
 a24:	a2 17       	cp	r26, r18
 a26:	b3 07       	cpc	r27, r19
 a28:	e4 07       	cpc	r30, r20
 a2a:	f5 07       	cpc	r31, r21
 a2c:	20 f0       	brcs	.+8      	; 0xa36 <__udivmodsi4_ep>
 a2e:	a2 1b       	sub	r26, r18
 a30:	b3 0b       	sbc	r27, r19
 a32:	e4 0b       	sbc	r30, r20
 a34:	f5 0b       	sbc	r31, r21

00000a36 <__udivmodsi4_ep>:
 a36:	66 1f       	adc	r22, r22
 a38:	77 1f       	adc	r23, r23
 a3a:	88 1f       	adc	r24, r24
 a3c:	99 1f       	adc	r25, r25
 a3e:	1a 94       	dec	r1
 a40:	69 f7       	brne	.-38     	; 0xa1c <__udivmodsi4_loop>
 a42:	60 95       	com	r22
 a44:	70 95       	com	r23
 a46:	80 95       	com	r24
 a48:	90 95       	com	r25
 a4a:	9b 01       	movw	r18, r22
 a4c:	ac 01       	movw	r20, r24
 a4e:	bd 01       	movw	r22, r26
 a50:	cf 01       	movw	r24, r30
 a52:	08 95       	ret

00000a54 <__divmodsi4>:
 a54:	97 fb       	bst	r25, 7
 a56:	09 2e       	mov	r0, r25
 a58:	05 26       	eor	r0, r21
 a5a:	0e d0       	rcall	.+28     	; 0xa78 <__divmodsi4_neg1>
 a5c:	57 fd       	sbrc	r21, 7
 a5e:	04 d0       	rcall	.+8      	; 0xa68 <__divmodsi4_neg2>
 a60:	d7 df       	rcall	.-82     	; 0xa10 <__udivmodsi4>
 a62:	0a d0       	rcall	.+20     	; 0xa78 <__divmodsi4_neg1>
 a64:	00 1c       	adc	r0, r0
 a66:	38 f4       	brcc	.+14     	; 0xa76 <__divmodsi4_exit>

00000a68 <__divmodsi4_neg2>:
 a68:	50 95       	com	r21
 a6a:	40 95       	com	r20
 a6c:	30 95       	com	r19
 a6e:	21 95       	neg	r18
 a70:	3f 4f       	sbci	r19, 0xFF	; 255
 a72:	4f 4f       	sbci	r20, 0xFF	; 255
 a74:	5f 4f       	sbci	r21, 0xFF	; 255

00000a76 <__divmodsi4_exit>:
 a76:	08 95       	ret

00000a78 <__divmodsi4_neg1>:
 a78:	f6 f7       	brtc	.-4      	; 0xa76 <__divmodsi4_exit>
 a7a:	90 95       	com	r25
 a7c:	80 95       	com	r24
 a7e:	70 95       	com	r23
 a80:	61 95       	neg	r22
 a82:	7f 4f       	sbci	r23, 0xFF	; 255
 a84:	8f 4f       	sbci	r24, 0xFF	; 255
 a86:	9f 4f       	sbci	r25, 0xFF	; 255
 a88:	08 95       	ret

00000a8a <__udivmodhi4>:
 a8a:	aa 1b       	sub	r26, r26
 a8c:	bb 1b       	sub	r27, r27
 a8e:	51 e1       	ldi	r21, 0x11	; 17
 a90:	07 c0       	rjmp	.+14     	; 0xaa0 <__udivmodhi4_ep>

00000a92 <__udivmodhi4_loop>:
 a92:	aa 1f       	adc	r26, r26
 a94:	bb 1f       	adc	r27, r27
 a96:	a6 17       	cp	r26, r22
 a98:	b7 07       	cpc	r27, r23
 a9a:	10 f0       	brcs	.+4      	; 0xaa0 <__udivmodhi4_ep>
 a9c:	a6 1b       	sub	r26, r22
 a9e:	b7 0b       	sbc	r27, r23

00000aa0 <__udivmodhi4_ep>:
 aa0:	88 1f       	adc	r24, r24
 aa2:	99 1f       	adc	r25, r25
 aa4:	5a 95       	dec	r21
 aa6:	a9 f7       	brne	.-22     	; 0xa92 <__udivmodhi4_loop>
 aa8:	80 95       	com	r24
 aaa:	90 95       	com	r25
 aac:	bc 01       	movw	r22, r24
 aae:	cd 01       	movw	r24, r26
 ab0:	08 95       	ret

00000ab2 <_exit>:
 ab2:	f8 94       	cli

00000ab4 <__stop_program>:
 ab4:	ff cf       	rjmp	.-2      	; 0xab4 <__stop_program>
