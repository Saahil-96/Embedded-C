
KEYPADWITHFUNCTION.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000030a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000035e  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000067  00000000  00000000  0000037e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000330  00000000  00000000  000003e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000012a  00000000  00000000  00000715  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000004d0  00000000  00000000  0000083f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000080  00000000  00000000  00000d10  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000118  00000000  00000000  00000d90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000198  00000000  00000000  00000ea8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 fd 00 	call	0x1fa	; 0x1fa <main>
  64:	0c 94 83 01 	jmp	0x306	; 0x306 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <lcd_cmd>:
#define rw 1
#define e 2

void lcd_cmd(unsigned char ch)
{
 unsigned char a = (ch & 0xf0);
  6c:	28 2f       	mov	r18, r24
  6e:	20 7f       	andi	r18, 0xF0	; 240
 lcd = a;
  70:	25 bb       	out	0x15, r18	; 21
 lcd&=~(1<<rs);
  72:	a8 98       	cbi	0x15, 0	; 21
 lcd&=~(1<<rw);
  74:	a9 98       	cbi	0x15, 1	; 21
 lcd|=(1<<e);
  76:	aa 9a       	sbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  78:	2a ef       	ldi	r18, 0xFA	; 250
  7a:	30 e0       	ldi	r19, 0x00	; 0
  7c:	f9 01       	movw	r30, r18
  7e:	31 97       	sbiw	r30, 0x01	; 1
  80:	f1 f7       	brne	.-4      	; 0x7e <lcd_cmd+0x12>
 _delay_ms(1);
 lcd&=~(1<<e);
  82:	aa 98       	cbi	0x15, 2	; 21
a = (ch<<4)&(0xf0);
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	44 e0       	ldi	r20, 0x04	; 4
  88:	88 0f       	add	r24, r24
  8a:	99 1f       	adc	r25, r25
  8c:	4a 95       	dec	r20
  8e:	e1 f7       	brne	.-8      	; 0x88 <lcd_cmd+0x1c>
 lcd = a;
  90:	85 bb       	out	0x15, r24	; 21
 lcd&=~(1<<rs);
  92:	a8 98       	cbi	0x15, 0	; 21
 lcd&=~(1<<rw);
  94:	a9 98       	cbi	0x15, 1	; 21
 lcd|=(1<<e);
  96:	aa 9a       	sbi	0x15, 2	; 21
  98:	c9 01       	movw	r24, r18
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <lcd_cmd+0x2e>
 _delay_ms(1);
 lcd&=~(1<<e);
  9e:	aa 98       	cbi	0x15, 2	; 21

}
  a0:	08 95       	ret

000000a2 <lcd_data>:

void lcd_data(unsigned char ch)
{
unsigned char a = (ch & 0xf0);
  a2:	28 2f       	mov	r18, r24
  a4:	20 7f       	andi	r18, 0xF0	; 240
 lcd=a;
  a6:	25 bb       	out	0x15, r18	; 21
 lcd|=(1<<rs);
  a8:	a8 9a       	sbi	0x15, 0	; 21
 lcd&=~(1<<rw);
  aa:	a9 98       	cbi	0x15, 1	; 21
 lcd|=(1<<e);
  ac:	aa 9a       	sbi	0x15, 2	; 21
  ae:	2a ef       	ldi	r18, 0xFA	; 250
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	f9 01       	movw	r30, r18
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <lcd_data+0x12>
 _delay_ms(1);
 lcd&=~(1<<e);
  b8:	aa 98       	cbi	0x15, 2	; 21
a = (ch<<4)&(0xf0);
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	54 e0       	ldi	r21, 0x04	; 4
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	5a 95       	dec	r21
  c4:	e1 f7       	brne	.-8      	; 0xbe <lcd_data+0x1c>
 lcd = a;
  c6:	85 bb       	out	0x15, r24	; 21
 lcd|=(1<<rs);
  c8:	a8 9a       	sbi	0x15, 0	; 21
 lcd&=~(1<<rw);
  ca:	a9 98       	cbi	0x15, 1	; 21
 lcd|=(1<<e);
  cc:	aa 9a       	sbi	0x15, 2	; 21
  ce:	c9 01       	movw	r24, r18
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <lcd_data+0x2e>
 _delay_ms(1);
 lcd&=~(1<<e);
  d4:	aa 98       	cbi	0x15, 2	; 21

}
  d6:	08 95       	ret

000000d8 <lcd_init>:

void lcd_init()
{
 lcd_cmd(0x02); //reset
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
 lcd_cmd(0x28); //4bit mode 
  de:	88 e2       	ldi	r24, 0x28	; 40
  e0:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
 lcd_cmd(0x0c); //cursor on
  e4:	8c e0       	ldi	r24, 0x0C	; 12
  e6:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
 lcd_cmd(0x06); //auto increment
  ea:	86 e0       	ldi	r24, 0x06	; 6
  ec:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
}
  f0:	08 95       	ret

000000f2 <lcd_string>:

void lcd_string( unsigned char *str)
{
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
  f6:	ec 01       	movw	r28, r24
  f8:	02 c0       	rjmp	.+4      	; 0xfe <lcd_string+0xc>
     int i =0;
     while(str[i]!='\0')
       {
              lcd_data(str[i]);
  fa:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_data>
}

void lcd_string( unsigned char *str)
{
     int i =0;
     while(str[i]!='\0')
  fe:	89 91       	ld	r24, Y+
 100:	88 23       	and	r24, r24
 102:	d9 f7       	brne	.-10     	; 0xfa <lcd_string+0x8>
       {
              lcd_data(str[i]);
              i++;
             
       }
}
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <lcd_num>:

void lcd_num(unsigned long n)
{
 10a:	ef 92       	push	r14
 10c:	ff 92       	push	r15
 10e:	0f 93       	push	r16
 110:	1f 93       	push	r17
 112:	7b 01       	movw	r14, r22
 114:	8c 01       	movw	r16, r24
  lcd_cmd(0x04);
 116:	84 e0       	ldi	r24, 0x04	; 4
 118:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
 11c:	18 c0       	rjmp	.+48     	; 0x14e <lcd_num+0x44>
   while(n>0)
 {
        int a =n%10; 
        lcd_data(a+48);
 11e:	c8 01       	movw	r24, r16
 120:	b7 01       	movw	r22, r14
 122:	2a e0       	ldi	r18, 0x0A	; 10
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	40 e0       	ldi	r20, 0x00	; 0
 128:	50 e0       	ldi	r21, 0x00	; 0
 12a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <__udivmodsi4>
 12e:	86 2f       	mov	r24, r22
 130:	80 5d       	subi	r24, 0xD0	; 208
 132:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_data>
        n=n/10;
 136:	c8 01       	movw	r24, r16
 138:	b7 01       	movw	r22, r14
 13a:	2a e0       	ldi	r18, 0x0A	; 10
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	40 e0       	ldi	r20, 0x00	; 0
 140:	50 e0       	ldi	r21, 0x00	; 0
 142:	0e 94 61 01 	call	0x2c2	; 0x2c2 <__udivmodsi4>
 146:	c9 01       	movw	r24, r18
 148:	da 01       	movw	r26, r20
 14a:	7c 01       	movw	r14, r24
 14c:	8d 01       	movw	r16, r26
}

void lcd_num(unsigned long n)
{
  lcd_cmd(0x04);
   while(n>0)
 14e:	e1 14       	cp	r14, r1
 150:	f1 04       	cpc	r15, r1
 152:	01 05       	cpc	r16, r1
 154:	11 05       	cpc	r17, r1
 156:	19 f7       	brne	.-58     	; 0x11e <lcd_num+0x14>
 {
        int a =n%10; 
        lcd_data(a+48);
        n=n/10;
 }
lcd_cmd(0x06);
 158:	86 e0       	ldi	r24, 0x06	; 6
 15a:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
}
 15e:	1f 91       	pop	r17
 160:	0f 91       	pop	r16
 162:	ff 90       	pop	r15
 164:	ef 90       	pop	r14
 166:	08 95       	ret

00000168 <Keypad>:
int Keypad ()
{
unsigned char a,b,c,d;
 PORTA=0b11101111;
 168:	8f ee       	ldi	r24, 0xEF	; 239
 16a:	8b bb       	out	0x1b, r24	; 27
 a=PINA&(1<<0);
 16c:	89 b3       	in	r24, 0x19	; 25
 b=PINA&(1<<1);
 16e:	89 b3       	in	r24, 0x19	; 25
 c=PINA&(1<<2);
 170:	89 b3       	in	r24, 0x19	; 25
 d=PINA&(1<<3);
 172:	99 b3       	in	r25, 0x19	; 25

 if ((c==0))
 174:	82 ff       	sbrs	r24, 2
 176:	3d c0       	rjmp	.+122    	; 0x1f2 <Keypad+0x8a>
 { 
  return(0);
  }

 PORTA=0b11011111;
 178:	8f ed       	ldi	r24, 0xDF	; 223
 17a:	8b bb       	out	0x1b, r24	; 27
 a=PINA&(1<<0);
 17c:	89 b3       	in	r24, 0x19	; 25
 b=PINA&(1<<1);
 17e:	99 b3       	in	r25, 0x19	; 25
 c=PINA&(1<<2);
 180:	89 b3       	in	r24, 0x19	; 25
 d=PINA&(1<<3);

 if ((d==0))
 182:	cb 99       	sbic	0x19, 3	; 25
 184:	03 c0       	rjmp	.+6      	; 0x18c <Keypad+0x24>
 186:	21 e0       	ldi	r18, 0x01	; 1
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	35 c0       	rjmp	.+106    	; 0x1f6 <Keypad+0x8e>
 { 
 return(1);
  }
 if ((c==0))
 18c:	82 fd       	sbrc	r24, 2
 18e:	03 c0       	rjmp	.+6      	; 0x196 <Keypad+0x2e>
 190:	22 e0       	ldi	r18, 0x02	; 2
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	30 c0       	rjmp	.+96     	; 0x1f6 <Keypad+0x8e>
 { 
 return(2);
  }
 if ((b==0))
 196:	91 fd       	sbrc	r25, 1
 198:	03 c0       	rjmp	.+6      	; 0x1a0 <Keypad+0x38>
 19a:	23 e0       	ldi	r18, 0x03	; 3
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	2b c0       	rjmp	.+86     	; 0x1f6 <Keypad+0x8e>
 { 
 return(3);
  }
 	
 PORTA=0b10111111;
 1a0:	8f eb       	ldi	r24, 0xBF	; 191
 1a2:	8b bb       	out	0x1b, r24	; 27
 a=PINA&(1<<0);
 1a4:	89 b3       	in	r24, 0x19	; 25
 b=PINA&(1<<1);
 1a6:	99 b3       	in	r25, 0x19	; 25
 c=PINA&(1<<2);
 1a8:	89 b3       	in	r24, 0x19	; 25
 d=PINA&(1<<3);

 if ((d==0))
 1aa:	cb 99       	sbic	0x19, 3	; 25
 1ac:	03 c0       	rjmp	.+6      	; 0x1b4 <Keypad+0x4c>
 1ae:	24 e0       	ldi	r18, 0x04	; 4
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	21 c0       	rjmp	.+66     	; 0x1f6 <Keypad+0x8e>
 { 
 return(4);
  }
 if ((c==0))
 1b4:	82 fd       	sbrc	r24, 2
 1b6:	03 c0       	rjmp	.+6      	; 0x1be <Keypad+0x56>
 1b8:	25 e0       	ldi	r18, 0x05	; 5
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	1c c0       	rjmp	.+56     	; 0x1f6 <Keypad+0x8e>
 { 
 return(5);
  }
 if ((b==0))
 1be:	91 fd       	sbrc	r25, 1
 1c0:	03 c0       	rjmp	.+6      	; 0x1c8 <Keypad+0x60>
 1c2:	26 e0       	ldi	r18, 0x06	; 6
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	17 c0       	rjmp	.+46     	; 0x1f6 <Keypad+0x8e>
 { 
 return(6);
  }

 PORTA=0b01111111;
 1c8:	8f e7       	ldi	r24, 0x7F	; 127
 1ca:	8b bb       	out	0x1b, r24	; 27
 a=PINA&(1<<0);
 1cc:	89 b3       	in	r24, 0x19	; 25
 b=PINA&(1<<1);
 1ce:	99 b3       	in	r25, 0x19	; 25
 c=PINA&(1<<2);
 1d0:	89 b3       	in	r24, 0x19	; 25
 d=PINA&(1<<3);

 if ((d==0))
 1d2:	cb 99       	sbic	0x19, 3	; 25
 1d4:	03 c0       	rjmp	.+6      	; 0x1dc <Keypad+0x74>
 1d6:	27 e0       	ldi	r18, 0x07	; 7
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	0d c0       	rjmp	.+26     	; 0x1f6 <Keypad+0x8e>
 { 
 return(7);
  }
 if ((c==0))
 1dc:	82 fd       	sbrc	r24, 2
 1de:	03 c0       	rjmp	.+6      	; 0x1e6 <Keypad+0x7e>
 1e0:	28 e0       	ldi	r18, 0x08	; 8
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	08 c0       	rjmp	.+16     	; 0x1f6 <Keypad+0x8e>
 { 
 return(8);
  }
 if ((b==0))
 1e6:	91 fd       	sbrc	r25, 1
 1e8:	03 c0       	rjmp	.+6      	; 0x1f0 <Keypad+0x88>
 1ea:	29 e0       	ldi	r18, 0x09	; 9
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <Keypad+0x8e>
 1f0:	08 95       	ret
 { 
 return(9);
  }

}
 1f2:	20 e0       	ldi	r18, 0x00	; 0
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	c9 01       	movw	r24, r18
 1f8:	08 95       	ret

000001fa <main>:
#include "lcd.h"
#include "keypad.h"

void main ()
{int A;
 DDRC=0xff;
 1fa:	8f ef       	ldi	r24, 0xFF	; 255
 1fc:	84 bb       	out	0x14, r24	; 20
 DDRA=0xf0;
 1fe:	80 ef       	ldi	r24, 0xF0	; 240
 200:	8a bb       	out	0x1a, r24	; 26
 lcd_init();
 202:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_init>
 lcd_cmd(0x01);
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
 20c:	84 ec       	ldi	r24, 0xC4	; 196
 20e:	99 e0       	ldi	r25, 0x09	; 9
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <main+0x16>
 214:	04 c0       	rjmp	.+8      	; 0x21e <main+0x24>
 { 
  lcd_cmd(0x80);
  lcd_data('0');
 while(PORTA!=0xff)      
 {
  int A=Keypad ();
 216:	0e 94 b4 00 	call	0x168	; 0x168 <Keypad>
  if(A==0)
 21a:	00 97       	sbiw	r24, 0x00	; 0
 21c:	29 f4       	brne	.+10     	; 0x228 <main+0x2e>
  {
  lcd_cmd(0x80);
 21e:	80 e8       	ldi	r24, 0x80	; 128
 220:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
  lcd_data('0');
 224:	80 e3       	ldi	r24, 0x30	; 48
 226:	46 c0       	rjmp	.+140    	; 0x2b4 <main+0xba>
   }
  else if (A==1)
 228:	81 30       	cpi	r24, 0x01	; 1
 22a:	91 05       	cpc	r25, r1
 22c:	29 f4       	brne	.+10     	; 0x238 <main+0x3e>
  {
  lcd_cmd(0x80);
 22e:	80 e8       	ldi	r24, 0x80	; 128
 230:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
  lcd_data('1');
 234:	81 e3       	ldi	r24, 0x31	; 49
 236:	3e c0       	rjmp	.+124    	; 0x2b4 <main+0xba>
   }
  else if (A==2)
 238:	82 30       	cpi	r24, 0x02	; 2
 23a:	91 05       	cpc	r25, r1
 23c:	29 f4       	brne	.+10     	; 0x248 <main+0x4e>
  {
  lcd_cmd(0x80);
 23e:	80 e8       	ldi	r24, 0x80	; 128
 240:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
  lcd_data('2');
 244:	82 e3       	ldi	r24, 0x32	; 50
 246:	36 c0       	rjmp	.+108    	; 0x2b4 <main+0xba>
    }
  else if (A==3)
 248:	83 30       	cpi	r24, 0x03	; 3
 24a:	91 05       	cpc	r25, r1
 24c:	29 f4       	brne	.+10     	; 0x258 <main+0x5e>
  {
  lcd_cmd(0x80);
 24e:	80 e8       	ldi	r24, 0x80	; 128
 250:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
  lcd_data('3');
 254:	83 e3       	ldi	r24, 0x33	; 51
 256:	2e c0       	rjmp	.+92     	; 0x2b4 <main+0xba>
   }
  else if (A==4)
 258:	84 30       	cpi	r24, 0x04	; 4
 25a:	91 05       	cpc	r25, r1
 25c:	29 f4       	brne	.+10     	; 0x268 <main+0x6e>
  {
  lcd_cmd(0x80);
 25e:	80 e8       	ldi	r24, 0x80	; 128
 260:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
  lcd_data('4');
 264:	84 e3       	ldi	r24, 0x34	; 52
 266:	26 c0       	rjmp	.+76     	; 0x2b4 <main+0xba>
   }
  else if (A==5)
 268:	85 30       	cpi	r24, 0x05	; 5
 26a:	91 05       	cpc	r25, r1
 26c:	29 f4       	brne	.+10     	; 0x278 <main+0x7e>
  {
  lcd_cmd(0x80);
 26e:	80 e8       	ldi	r24, 0x80	; 128
 270:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
  lcd_data('5');
 274:	85 e3       	ldi	r24, 0x35	; 53
 276:	1e c0       	rjmp	.+60     	; 0x2b4 <main+0xba>
   }
  else if (A==6)
 278:	86 30       	cpi	r24, 0x06	; 6
 27a:	91 05       	cpc	r25, r1
 27c:	29 f4       	brne	.+10     	; 0x288 <main+0x8e>
  {
  lcd_cmd(0x80);
 27e:	80 e8       	ldi	r24, 0x80	; 128
 280:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
  lcd_data('6');
 284:	86 e3       	ldi	r24, 0x36	; 54
 286:	16 c0       	rjmp	.+44     	; 0x2b4 <main+0xba>
   }
  else if (A==7)
 288:	87 30       	cpi	r24, 0x07	; 7
 28a:	91 05       	cpc	r25, r1
 28c:	29 f4       	brne	.+10     	; 0x298 <main+0x9e>
  {
  lcd_cmd(0x80);
 28e:	80 e8       	ldi	r24, 0x80	; 128
 290:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
  lcd_data('7');
 294:	87 e3       	ldi	r24, 0x37	; 55
 296:	0e c0       	rjmp	.+28     	; 0x2b4 <main+0xba>
   }       
  else if (A==8)
 298:	88 30       	cpi	r24, 0x08	; 8
 29a:	91 05       	cpc	r25, r1
 29c:	29 f4       	brne	.+10     	; 0x2a8 <main+0xae>
  {
  lcd_cmd(0x80);
 29e:	80 e8       	ldi	r24, 0x80	; 128
 2a0:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
  lcd_data('8');
 2a4:	88 e3       	ldi	r24, 0x38	; 56
 2a6:	06 c0       	rjmp	.+12     	; 0x2b4 <main+0xba>
    }
  else if (A==9)
 2a8:	09 97       	sbiw	r24, 0x09	; 9
 2aa:	31 f4       	brne	.+12     	; 0x2b8 <main+0xbe>
  {
  lcd_cmd(0x80);
 2ac:	80 e8       	ldi	r24, 0x80	; 128
 2ae:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
  lcd_data('9');
 2b2:	89 e3       	ldi	r24, 0x39	; 57
 2b4:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_data>
 _delay_ms(10);
 while(1)
 { 
  lcd_cmd(0x80);
  lcd_data('0');
 while(PORTA!=0xff)      
 2b8:	8b b3       	in	r24, 0x1b	; 27
 2ba:	8f 3f       	cpi	r24, 0xFF	; 255
 2bc:	09 f4       	brne	.+2      	; 0x2c0 <main+0xc6>
 2be:	af cf       	rjmp	.-162    	; 0x21e <main+0x24>
 2c0:	aa cf       	rjmp	.-172    	; 0x216 <main+0x1c>

000002c2 <__udivmodsi4>:
 2c2:	a1 e2       	ldi	r26, 0x21	; 33
 2c4:	1a 2e       	mov	r1, r26
 2c6:	aa 1b       	sub	r26, r26
 2c8:	bb 1b       	sub	r27, r27
 2ca:	fd 01       	movw	r30, r26
 2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <__udivmodsi4_ep>

000002ce <__udivmodsi4_loop>:
 2ce:	aa 1f       	adc	r26, r26
 2d0:	bb 1f       	adc	r27, r27
 2d2:	ee 1f       	adc	r30, r30
 2d4:	ff 1f       	adc	r31, r31
 2d6:	a2 17       	cp	r26, r18
 2d8:	b3 07       	cpc	r27, r19
 2da:	e4 07       	cpc	r30, r20
 2dc:	f5 07       	cpc	r31, r21
 2de:	20 f0       	brcs	.+8      	; 0x2e8 <__udivmodsi4_ep>
 2e0:	a2 1b       	sub	r26, r18
 2e2:	b3 0b       	sbc	r27, r19
 2e4:	e4 0b       	sbc	r30, r20
 2e6:	f5 0b       	sbc	r31, r21

000002e8 <__udivmodsi4_ep>:
 2e8:	66 1f       	adc	r22, r22
 2ea:	77 1f       	adc	r23, r23
 2ec:	88 1f       	adc	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	1a 94       	dec	r1
 2f2:	69 f7       	brne	.-38     	; 0x2ce <__udivmodsi4_loop>
 2f4:	60 95       	com	r22
 2f6:	70 95       	com	r23
 2f8:	80 95       	com	r24
 2fa:	90 95       	com	r25
 2fc:	9b 01       	movw	r18, r22
 2fe:	ac 01       	movw	r20, r24
 300:	bd 01       	movw	r22, r26
 302:	cf 01       	movw	r24, r30
 304:	08 95       	ret

00000306 <_exit>:
 306:	f8 94       	cli

00000308 <__stop_program>:
 308:	ff cf       	rjmp	.-2      	; 0x308 <__stop_program>
