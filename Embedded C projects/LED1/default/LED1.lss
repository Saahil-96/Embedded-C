
LED1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000188  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000027  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000018e  00000000  00000000  00000223  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000010c  00000000  00000000  000003b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000227  00000000  00000000  000004bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  000006e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000d9  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000138  00000000  00000000  000007ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000925  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  64:	0c 94 c2 00 	jmp	0x184	; 0x184 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <display>:
#define s2 PD1


void display(int a)
{
 if (a==0)
  6c:	00 97       	sbiw	r24, 0x00	; 0
  6e:	11 f4       	brne	.+4      	; 0x74 <display+0x8>
	  {PORTC=0b00111111;}
  70:	8f e3       	ldi	r24, 0x3F	; 63
  72:	27 c0       	rjmp	.+78     	; 0xc2 <display+0x56>
	 else if (a==1)
  74:	81 30       	cpi	r24, 0x01	; 1
  76:	91 05       	cpc	r25, r1
  78:	11 f4       	brne	.+4      	; 0x7e <display+0x12>
	   {PORTC=0b00000110;}
  7a:	86 e0       	ldi	r24, 0x06	; 6
  7c:	22 c0       	rjmp	.+68     	; 0xc2 <display+0x56>
     else if (a==2)
  7e:	82 30       	cpi	r24, 0x02	; 2
  80:	91 05       	cpc	r25, r1
  82:	11 f4       	brne	.+4      	; 0x88 <display+0x1c>
	    {PORTC=0b01011011;}
  84:	8b e5       	ldi	r24, 0x5B	; 91
  86:	1d c0       	rjmp	.+58     	; 0xc2 <display+0x56>
     else if (a==3)
  88:	83 30       	cpi	r24, 0x03	; 3
  8a:	91 05       	cpc	r25, r1
  8c:	11 f4       	brne	.+4      	; 0x92 <display+0x26>
	      {PORTC=0b01001111;}
  8e:	8f e4       	ldi	r24, 0x4F	; 79
  90:	18 c0       	rjmp	.+48     	; 0xc2 <display+0x56>
     else if (a==4)
  92:	84 30       	cpi	r24, 0x04	; 4
  94:	91 05       	cpc	r25, r1
  96:	11 f4       	brne	.+4      	; 0x9c <display+0x30>
	       {PORTC=0b01100110;}
  98:	86 e6       	ldi	r24, 0x66	; 102
  9a:	13 c0       	rjmp	.+38     	; 0xc2 <display+0x56>
     else if (a==5)
  9c:	85 30       	cpi	r24, 0x05	; 5
  9e:	91 05       	cpc	r25, r1
  a0:	11 f4       	brne	.+4      	; 0xa6 <display+0x3a>
	        {PORTC=0b01101101;}
  a2:	8d e6       	ldi	r24, 0x6D	; 109
  a4:	0e c0       	rjmp	.+28     	; 0xc2 <display+0x56>
	 else if (a==6)
  a6:	86 30       	cpi	r24, 0x06	; 6
  a8:	91 05       	cpc	r25, r1
  aa:	11 f4       	brne	.+4      	; 0xb0 <display+0x44>
	         {PORTC=0b01111101;}
  ac:	8d e7       	ldi	r24, 0x7D	; 125
  ae:	09 c0       	rjmp	.+18     	; 0xc2 <display+0x56>
     else if (a==7)
  b0:	87 30       	cpi	r24, 0x07	; 7
  b2:	91 05       	cpc	r25, r1
  b4:	11 f4       	brne	.+4      	; 0xba <display+0x4e>
	          {PORTC=0b00000111;}
  b6:	87 e0       	ldi	r24, 0x07	; 7
  b8:	04 c0       	rjmp	.+8      	; 0xc2 <display+0x56>
     else if (a==8)
  ba:	88 30       	cpi	r24, 0x08	; 8
  bc:	91 05       	cpc	r25, r1
  be:	19 f4       	brne	.+6      	; 0xc6 <display+0x5a>
               {PORTC=0b01111111;}
  c0:	8f e7       	ldi	r24, 0x7F	; 127
  c2:	85 bb       	out	0x15, r24	; 21
  c4:	08 95       	ret
     else if (a==9)
  c6:	09 97       	sbiw	r24, 0x09	; 9
  c8:	11 f4       	brne	.+4      	; 0xce <display+0x62>
	       	    {PORTC=0b01101111;
  ca:	8f e6       	ldi	r24, 0x6F	; 111
  cc:	85 bb       	out	0x15, r24	; 21
  ce:	08 95       	ret

000000d0 <main>:
				  }  
	}


int main()
{
  d0:	ef 92       	push	r14
  d2:	ff 92       	push	r15
  d4:	0f 93       	push	r16
  d6:	1f 93       	push	r17
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29

int count=0;

DDRC=0xff;
  dc:	8f ef       	ldi	r24, 0xFF	; 255
  de:	84 bb       	out	0x14, r24	; 20
DDRD=0x03;
  e0:	83 e0       	ldi	r24, 0x03	; 3
  e2:	81 bb       	out	0x11, r24	; 17
  e4:	c0 e0       	ldi	r28, 0x00	; 0
  e6:	d0 e0       	ldi	r29, 0x00	; 0

while(1)
{

PORTD=0x01;
  e8:	ee 24       	eor	r14, r14
  ea:	e3 94       	inc	r14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ec:	09 e1       	ldi	r16, 0x19	; 25
  ee:	10 e0       	ldi	r17, 0x00	; 0
display(count/10);
_delay_ms(1000);

PORTD=0x02;
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	f8 2e       	mov	r15, r24
DDRD=0x03;

while(1)
{

PORTD=0x01;
  f4:	e2 ba       	out	0x12, r14	; 18
display(count/10);
  f6:	ce 01       	movw	r24, r28
  f8:	6a e0       	ldi	r22, 0x0A	; 10
  fa:	70 e0       	ldi	r23, 0x00	; 0
  fc:	0e 94 9b 00 	call	0x136	; 0x136 <__divmodhi4>
 100:	cb 01       	movw	r24, r22
 102:	0e 94 36 00 	call	0x6c	; 0x6c <display>
 106:	80 e1       	ldi	r24, 0x10	; 16
 108:	97 e2       	ldi	r25, 0x27	; 39
 10a:	f8 01       	movw	r30, r16
 10c:	31 97       	sbiw	r30, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <main+0x3c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 110:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 112:	d9 f7       	brne	.-10     	; 0x10a <main+0x3a>
_delay_ms(1000);

PORTD=0x02;
 114:	f2 ba       	out	0x12, r15	; 18
display(count%10);
 116:	ce 01       	movw	r24, r28
 118:	6a e0       	ldi	r22, 0x0A	; 10
 11a:	70 e0       	ldi	r23, 0x00	; 0
 11c:	0e 94 9b 00 	call	0x136	; 0x136 <__divmodhi4>
 120:	0e 94 36 00 	call	0x6c	; 0x6c <display>
 124:	80 e1       	ldi	r24, 0x10	; 16
 126:	97 e2       	ldi	r25, 0x27	; 39
 128:	f8 01       	movw	r30, r16
 12a:	31 97       	sbiw	r30, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <main+0x5a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 12e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 130:	d9 f7       	brne	.-10     	; 0x128 <main+0x58>
_delay_ms(1000);

count++;
 132:	21 96       	adiw	r28, 0x01	; 1
 134:	df cf       	rjmp	.-66     	; 0xf4 <main+0x24>

00000136 <__divmodhi4>:
 136:	97 fb       	bst	r25, 7
 138:	09 2e       	mov	r0, r25
 13a:	07 26       	eor	r0, r23
 13c:	0a d0       	rcall	.+20     	; 0x152 <__divmodhi4_neg1>
 13e:	77 fd       	sbrc	r23, 7
 140:	04 d0       	rcall	.+8      	; 0x14a <__divmodhi4_neg2>
 142:	0c d0       	rcall	.+24     	; 0x15c <__udivmodhi4>
 144:	06 d0       	rcall	.+12     	; 0x152 <__divmodhi4_neg1>
 146:	00 20       	and	r0, r0
 148:	1a f4       	brpl	.+6      	; 0x150 <__divmodhi4_exit>

0000014a <__divmodhi4_neg2>:
 14a:	70 95       	com	r23
 14c:	61 95       	neg	r22
 14e:	7f 4f       	sbci	r23, 0xFF	; 255

00000150 <__divmodhi4_exit>:
 150:	08 95       	ret

00000152 <__divmodhi4_neg1>:
 152:	f6 f7       	brtc	.-4      	; 0x150 <__divmodhi4_exit>
 154:	90 95       	com	r25
 156:	81 95       	neg	r24
 158:	9f 4f       	sbci	r25, 0xFF	; 255
 15a:	08 95       	ret

0000015c <__udivmodhi4>:
 15c:	aa 1b       	sub	r26, r26
 15e:	bb 1b       	sub	r27, r27
 160:	51 e1       	ldi	r21, 0x11	; 17
 162:	07 c0       	rjmp	.+14     	; 0x172 <__udivmodhi4_ep>

00000164 <__udivmodhi4_loop>:
 164:	aa 1f       	adc	r26, r26
 166:	bb 1f       	adc	r27, r27
 168:	a6 17       	cp	r26, r22
 16a:	b7 07       	cpc	r27, r23
 16c:	10 f0       	brcs	.+4      	; 0x172 <__udivmodhi4_ep>
 16e:	a6 1b       	sub	r26, r22
 170:	b7 0b       	sbc	r27, r23

00000172 <__udivmodhi4_ep>:
 172:	88 1f       	adc	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	5a 95       	dec	r21
 178:	a9 f7       	brne	.-22     	; 0x164 <__udivmodhi4_loop>
 17a:	80 95       	com	r24
 17c:	90 95       	com	r25
 17e:	bc 01       	movw	r22, r24
 180:	cd 01       	movw	r24, r26
 182:	08 95       	ret

00000184 <_exit>:
 184:	f8 94       	cli

00000186 <__stop_program>:
 186:	ff cf       	rjmp	.-2      	; 0x186 <__stop_program>
